
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009620  08009620  0000a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009728  08009728  0000a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  08009730  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000904  2000000c  08009739  0000b00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000910  08009739  0000b910  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f64b  00000000  00000000  0000b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ac4  00000000  00000000  0002a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001930  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000139a  00000000  00000000  0002fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038ff1  00000000  00000000  00030e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000225cc  00000000  00000000  00069e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f7aa  00000000  00000000  0008c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ebb81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c9c  00000000  00000000  001ebbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001f2860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08009608 	.word	0x08009608

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08009608 	.word	0x08009608

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000602:	4909      	ldr	r1, [pc, #36]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x34>)
 800060e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000618:	68fb      	ldr	r3, [r7, #12]
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	46020c00 	.word	0x46020c00

0800062c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x34>)
 8000636:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800063a:	4909      	ldr	r1, [pc, #36]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x34>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x34>)
 8000646:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000650:	68fb      	ldr	r3, [r7, #12]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	46020c00 	.word	0x46020c00

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	long i = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f001 fb5f 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000672:	f000 f891 	bl	8000798 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f82b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 fbe1 	bl	8000e40 <MX_GPIO_Init>
  MX_ADF1_Init();
 800067e:	f000 f899 	bl	80007b4 <MX_ADF1_Init>
  MX_I2C1_Init();
 8000682:	f000 f8e5 	bl	8000850 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000686:	f000 f923 	bl	80008d0 <MX_I2C2_Init>
  MX_ICACHE_Init();
 800068a:	f000 f961 	bl	8000950 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800068e:	f000 f973 	bl	8000978 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000692:	f000 f9eb 	bl	8000a6c <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8000696:	f000 fa65 	bl	8000b64 <MX_SPI2_Init>
  MX_UART4_Init();
 800069a:	f000 fad1 	bl	8000c40 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800069e:	f000 fb1b 	bl	8000cd8 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 80006a2:	f000 fb65 	bl	8000d70 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a6:	f000 fb99 	bl	8000ddc <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOH, LED_RED_Pin);
 80006aa:	2140      	movs	r1, #64	@ 0x40
 80006ac:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <main+0x64>)
 80006ae:	f001 fffd 	bl	80026ac <HAL_GPIO_TogglePin>
	  i = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
	  while (i < 3000000)
 80006b6:	e002      	b.n	80006be <main+0x5a>
	  {
		  i++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
	  while (i < 3000000)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a02      	ldr	r2, [pc, #8]	@ (80006cc <main+0x68>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	ddf8      	ble.n	80006b8 <main+0x54>
	  HAL_GPIO_TogglePin(GPIOH, LED_RED_Pin);
 80006c6:	e7f0      	b.n	80006aa <main+0x46>
 80006c8:	42021c00 	.word	0x42021c00
 80006cc:	002dc6bf 	.word	0x002dc6bf

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09e      	sub	sp, #120	@ 0x78
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2260      	movs	r2, #96	@ 0x60
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f008 ff65 	bl	80095ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006f8:	f003 fbb4 	bl	8003e64 <HAL_PWREx_ControlVoltageScaling>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000702:	f000 fcff 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000706:	2332      	movs	r3, #50	@ 0x32
 8000708:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800072c:	2301      	movs	r3, #1
 800072e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000738:	2350      	movs	r3, #80	@ 0x50
 800073a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000748:	2300      	movs	r3, #0
 800074a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fc81 	bl	800405c <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 fcd0 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	231f      	movs	r3, #31
 8000766:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2303      	movs	r3, #3
 800076a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2104      	movs	r1, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fb47 	bl	8004e14 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800078c:	f000 fcba 	bl	8001104 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3778      	adds	r7, #120	@ 0x78
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800079c:	f003 fc4e 	bl	800403c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007a0:	2002      	movs	r0, #2
 80007a2:	f003 fbeb 	bl	8003f7c <HAL_PWREx_ConfigSupply>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007ac:	f000 fcaa 	bl	8001104 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_ADF1_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80007ea:	4816      	ldr	r0, [pc, #88]	@ (8000844 <MX_ADF1_Init+0x90>)
 80007ec:	f002 f8da 	bl	80029a4 <HAL_MDF_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 fc85 	bl	8001104 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_ADF1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_ADF1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_ADF1_Init+0x98>)
 8000808:	2240      	movs	r2, #64	@ 0x40
 800080a:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_ADF1_Init+0x98>)
 800080e:	2202      	movs	r2, #2
 8000810:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_ADF1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_ADF1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_ADF1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_ADF1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_ADF1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <MX_ADF1_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800083a:	4b04      	ldr	r3, [pc, #16]	@ (800084c <MX_ADF1_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000028 	.word	0x20000028
 8000848:	46024080 	.word	0x46024080
 800084c:	2000006c 	.word	0x2000006c

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f001 ff28 	bl	80026e0 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fc35 	bl	8001104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f001 ffba 	bl	8002816 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fc2c 	bl	8001104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f001 fffc 	bl	80028ac <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fc23 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000e8 	.word	0x200000e8
 80008c8:	40005400 	.word	0x40005400
 80008cc:	30909dec 	.word	0x30909dec

080008d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000948 <MX_I2C2_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	@ (800094c <MX_I2C2_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_I2C2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	@ (8000944 <MX_I2C2_Init+0x74>)
 800090c:	f001 fee8 	bl	80026e0 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fbf5 	bl	8001104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	@ (8000944 <MX_I2C2_Init+0x74>)
 800091e:	f001 ff7a 	bl	8002816 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fbec 	bl	8001104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_I2C2_Init+0x74>)
 8000930:	f001 ffbc 	bl	80028ac <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fbe3 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000013c 	.word	0x2000013c
 8000948:	40005800 	.word	0x40005800
 800094c:	30909dec 	.word	0x30909dec

08000950 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000954:	2000      	movs	r0, #0
 8000956:	f001 fff5 	bl	8002944 <HAL_ICACHE_ConfigAssociativityMode>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000960:	f000 fbd0 	bl	8001104 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000964:	f002 f80e 	bl	8002984 <HAL_ICACHE_Enable>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800096e:	f000 fbc9 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 800099a:	4a32      	ldr	r2, [pc, #200]	@ (8000a64 <MX_OCTOSPI1_Init+0xec>)
 800099c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009b0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009b4:	2217      	movs	r2, #23
 80009b6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009e6:	220a      	movs	r2, #10
 80009e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009f8:	2264      	movs	r2, #100	@ 0x64
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 80009fe:	f002 f97d 	bl	8002cfc <HAL_OSPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8000a08:	f000 fb7c 	bl	8001104 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a18:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a1c:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_OCTOSPI1_Init+0xf0>)
 8000a20:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 8000a2e:	f002 faa5 	bl	8002f7c <HAL_OSPIM_Config>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000a38:	f000 fb64 	bl	8001104 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_OCTOSPI1_Init+0xe8>)
 8000a4a:	f003 f887 	bl	8003b5c <HAL_OSPI_DLYB_SetConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000a54:	f000 fb56 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000190 	.word	0x20000190
 8000a64:	420d1400 	.word	0x420d1400
 8000a68:	01000001 	.word	0x01000001

08000a6c <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <MX_OCTOSPI2_Init+0xec>)
 8000a90:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000aa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000aa4:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000aa8:	221a      	movs	r2, #26
 8000aaa:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000abe:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000aca:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000af0:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000af2:	f002 f903 	bl	8002cfc <HAL_OSPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000afc:	f000 fb02 	bl	8001104 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_OCTOSPI2_Init+0xf0>)
 8000b0e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_OCTOSPI2_Init+0xf4>)
 8000b12:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000b20:	f002 fa2c 	bl	8002f7c <HAL_OSPIM_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000b2a:	f000 faeb 	bl	8001104 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_OCTOSPI2_Init+0xe8>)
 8000b3c:	f003 f80e 	bl	8003b5c <HAL_OSPI_DLYB_SetConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000b46:	f000 fadd 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001ec 	.word	0x200001ec
 8000b58:	420d2400 	.word	0x420d2400
 8000b5c:	00010002 	.word	0x00010002
 8000b60:	01000002 	.word	0x01000002

08000b64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b74:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b76:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <MX_SPI2_Init+0xd8>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000b9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000c00:	f007 f9b8 	bl	8007f74 <HAL_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000c0a:	f000 fa7b 	bl	8001104 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000c12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c16:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_SPI2_Init+0xd4>)
 8000c22:	f007 fad8 	bl	80081d6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000c2c:	f000 fa6a 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000248 	.word	0x20000248
 8000c3c:	40003800 	.word	0x40003800

08000c40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <MX_UART4_Init+0x94>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c88:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c8a:	f007 fae5 	bl	8008258 <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c94:	f000 fa36 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000c9c:	f007 ff26 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ca6:	f000 fa2d 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000cae:	f007 ff5b 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000cb8:	f000 fa24 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_UART4_Init+0x90>)
 8000cbe:	f007 fedc 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 fa1c 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200002d8 	.word	0x200002d8
 8000cd4:	40004c00 	.word	0x40004c00

08000cd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_USART1_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d22:	f007 fa99 	bl	8008258 <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f000 f9ea 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d34:	f007 feda 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f000 f9e1 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d46:	f007 ff0f 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f000 f9d8 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d56:	f007 fe90 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f000 f9d0 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000036c 	.word	0x2000036c
 8000d6c:	40013800 	.word	0x40013800

08000d70 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000d86:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000d8a:	f7ff fc4f 	bl	800062c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fc30 	bl	80005f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff fc2d 	bl	80005f4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <MX_UCPD1_Init+0x64>)
 8000dae:	f008 f8d1 	bl	8008f54 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000db6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000db8:	2303      	movs	r3, #3
 8000dba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_UCPD1_Init+0x68>)
 8000dc6:	f008 f8c5 	bl	8008f54 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	42020000 	.word	0x42020000
 8000dd8:	42020400 	.word	0x42020400

08000ddc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de2:	4a16      	ldr	r2, [pc, #88]	@ (8000e3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000de6:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de8:	2206      	movs	r2, #6
 8000dea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e24:	f002 fee2 	bl	8003bec <HAL_PCD_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e2e:	f000 f969 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000400 	.word	0x20000400
 8000e3c:	42040000 	.word	0x42040000

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e56:	4ba3      	ldr	r3, [pc, #652]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e5c:	4aa1      	ldr	r2, [pc, #644]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e66:	4b9f      	ldr	r3, [pc, #636]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	4b9b      	ldr	r3, [pc, #620]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7a:	4a9a      	ldr	r2, [pc, #616]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e84:	4b97      	ldr	r3, [pc, #604]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b94      	ldr	r3, [pc, #592]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e98:	4a92      	ldr	r2, [pc, #584]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea2:	4b90      	ldr	r3, [pc, #576]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb6:	4a8b      	ldr	r2, [pc, #556]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec0:	4b88      	ldr	r3, [pc, #544]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b85      	ldr	r3, [pc, #532]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed4:	4a83      	ldr	r2, [pc, #524]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ede:	4b81      	ldr	r3, [pc, #516]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b7d      	ldr	r3, [pc, #500]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000efc:	4b79      	ldr	r3, [pc, #484]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b76      	ldr	r3, [pc, #472]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f10:	4a74      	ldr	r2, [pc, #464]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f1a:	4b72      	ldr	r3, [pc, #456]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f28:	4b6e      	ldr	r3, [pc, #440]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f2e:	4a6d      	ldr	r2, [pc, #436]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f38:	4b6a      	ldr	r3, [pc, #424]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b67      	ldr	r3, [pc, #412]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f4c:	4a65      	ldr	r2, [pc, #404]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f56:	4b63      	ldr	r3, [pc, #396]	@ (80010e4 <MX_GPIO_Init+0x2a4>)
 8000f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	485f      	ldr	r0, [pc, #380]	@ (80010e8 <MX_GPIO_Init+0x2a8>)
 8000f6a:	f001 fb87 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	21c2      	movs	r1, #194	@ 0xc2
 8000f72:	485e      	ldr	r0, [pc, #376]	@ (80010ec <MX_GPIO_Init+0x2ac>)
 8000f74:	f001 fb82 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2140      	movs	r1, #64	@ 0x40
 8000f7c:	485c      	ldr	r0, [pc, #368]	@ (80010f0 <MX_GPIO_Init+0x2b0>)
 8000f7e:	f001 fb7d 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000f88:	485a      	ldr	r0, [pc, #360]	@ (80010f4 <MX_GPIO_Init+0x2b4>)
 8000f8a:	f001 fb77 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8000f8e:	f248 0324 	movw	r3, #32804	@ 0x8024
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4853      	ldr	r0, [pc, #332]	@ (80010f0 <MX_GPIO_Init+0x2b0>)
 8000fa4:	f001 f992 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	484c      	ldr	r0, [pc, #304]	@ (80010ec <MX_GPIO_Init+0x2ac>)
 8000fbc:	f001 f986 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4844      	ldr	r0, [pc, #272]	@ (80010e8 <MX_GPIO_Init+0x2a8>)
 8000fd8:	f001 f978 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4841      	ldr	r0, [pc, #260]	@ (80010f8 <MX_GPIO_Init+0x2b8>)
 8000ff2:	f001 f96b 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000ff6:	23c2      	movs	r3, #194	@ 0xc2
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	4837      	ldr	r0, [pc, #220]	@ (80010ec <MX_GPIO_Init+0x2ac>)
 800100e:	f001 f95d 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001024:	2306      	movs	r3, #6
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4831      	ldr	r0, [pc, #196]	@ (80010f4 <MX_GPIO_Init+0x2b4>)
 8001030:	f001 f94c 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001034:	2340      	movs	r3, #64	@ 0x40
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4829      	ldr	r0, [pc, #164]	@ (80010f0 <MX_GPIO_Init+0x2b0>)
 800104c:	f001 f93e 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8001050:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4825      	ldr	r0, [pc, #148]	@ (80010fc <MX_GPIO_Init+0x2bc>)
 8001066:	f001 f931 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 800106a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4820      	ldr	r0, [pc, #128]	@ (8001100 <MX_GPIO_Init+0x2c0>)
 8001080:	f001 f924 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001084:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <MX_GPIO_Init+0x2b4>)
 800109a:	f001 f917 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 800109e:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	@ (80010f4 <MX_GPIO_Init+0x2b4>)
 80010b8:	f001 f908 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80010bc:	2302      	movs	r3, #2
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80010cc:	2306      	movs	r3, #6
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_GPIO_Init+0x2a8>)
 80010d8:	f001 f8f8 	bl	80022cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010dc:	bf00      	nop
 80010de:	3738      	adds	r7, #56	@ 0x38
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	46020c00 	.word	0x46020c00
 80010e8:	42020400 	.word	0x42020400
 80010ec:	42021c00 	.word	0x42021c00
 80010f0:	42021800 	.word	0x42021800
 80010f4:	42021400 	.word	0x42021400
 80010f8:	42020800 	.word	0x42020800
 80010fc:	42020c00 	.word	0x42020c00
 8001100:	42021000 	.word	0x42021000

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <Error_Handler+0x8>

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_MspInit+0x34>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800111c:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_MspInit+0x34>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_MspInit+0x34>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001134:	f002 ff72 	bl	800401c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001138:	f002 ff80 	bl	800403c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	46020c00 	.word	0x46020c00

08001148 <HAL_MDF_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmdf: MDF handle pointer
  * @retval None
  */
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0bc      	sub	sp, #240	@ 0xf0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	22c8      	movs	r2, #200	@ 0xc8
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 fa20 	bl	80095ae <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HAL_MDF_MspInit+0xc8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d146      	bne.n	8001206 <HAL_MDF_MspInit+0xbe>

    /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001178:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fa10 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 800119a:	f7ff ffb3 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c2:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_MDF_MspInit+0xcc>)
 80011ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80011da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <HAL_MDF_MspInit+0xd0>)
 8001202:	f001 f863 	bl	80022cc <HAL_GPIO_Init>

    /* USER CODE END ADF1_MspInit 1 */

  }

}
 8001206:	bf00      	nop
 8001208:	37f0      	adds	r7, #240	@ 0xf0
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	46024080 	.word	0x46024080
 8001214:	46020c00 	.word	0x46020c00
 8001218:	42021000 	.word	0x42021000

0800121c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0be      	sub	sp, #248	@ 0xf8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	22c8      	movs	r2, #200	@ 0xc8
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f008 f9b6 	bl	80095ae <memset>
  if(hi2c->Instance==I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a4d      	ldr	r2, [pc, #308]	@ (800137c <HAL_I2C_MspInit+0x160>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d147      	bne.n	80012dc <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	4618      	mov	r0, r3
 8001264:	f004 f9a6 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800126e:	f7ff ff49 	bl	8001104 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b43      	ldr	r3, [pc, #268]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001290:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012aa:	2304      	movs	r3, #4
 80012ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4833      	ldr	r0, [pc, #204]	@ (8001384 <HAL_I2C_MspInit+0x168>)
 80012b8:	f001 f808 	bl	80022cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 80012be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 80012ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012da:	e04a      	b.n	8001372 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a29      	ldr	r2, [pc, #164]	@ (8001388 <HAL_I2C_MspInit+0x16c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d145      	bne.n	8001372 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012e6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 f959 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001308:	f7ff fefc 	bl	8001104 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 800130e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001312:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001318:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 800131e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800132a:	2330      	movs	r3, #48	@ 0x30
 800132c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001342:	2304      	movs	r3, #4
 8001344:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001348:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800134c:	4619      	mov	r1, r3
 800134e:	480f      	ldr	r0, [pc, #60]	@ (800138c <HAL_I2C_MspInit+0x170>)
 8001350:	f000 ffbc 	bl	80022cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 8001356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 800135c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001360:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_I2C_MspInit+0x164>)
 8001366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
}
 8001372:	bf00      	nop
 8001374:	37f8      	adds	r7, #248	@ 0xf8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	46020c00 	.word	0x46020c00
 8001384:	42020400 	.word	0x42020400
 8001388:	40005800 	.word	0x40005800
 800138c:	42021c00 	.word	0x42021c00

08001390 <HAL_OSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hospi: OSPI handle pointer
  * @retval None
  */
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0c8      	sub	sp, #288	@ 0x120
 8001394:	af00      	add	r7, sp, #0
 8001396:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800139a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800139e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013b4:	22c8      	movs	r2, #200	@ 0xc8
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 f8f8 	bl	80095ae <memset>
  if(hospi->Instance==OCTOSPI1)
 80013be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4aa6      	ldr	r2, [pc, #664]	@ (8001664 <HAL_OSPI_MspInit+0x2d4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 815d 	bne.w	800168c <HAL_OSPI_MspInit+0x2fc>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80013d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f8e3 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80013f4:	f7ff fe86 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80013f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001668 <HAL_OSPI_MspInit+0x2d8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a9a      	ldr	r2, [pc, #616]	@ (8001668 <HAL_OSPI_MspInit+0x2d8>)
 8001400:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001402:	4b99      	ldr	r3, [pc, #612]	@ (8001668 <HAL_OSPI_MspInit+0x2d8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d10e      	bne.n	8001428 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800140a:	4b98      	ldr	r3, [pc, #608]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001410:	4a96      	ldr	r2, [pc, #600]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001416:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800141a:	4b94      	ldr	r3, [pc, #592]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800141c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001428:	4b90      	ldr	r3, [pc, #576]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142e:	4a8f      	ldr	r2, [pc, #572]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001438:	4b8c      	ldr	r3, [pc, #560]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001446:	4b89      	ldr	r3, [pc, #548]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144c:	4a87      	ldr	r2, [pc, #540]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001452:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
 8001462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001464:	4b81      	ldr	r3, [pc, #516]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146a:	4a80      	ldr	r2, [pc, #512]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001474:	4b7d      	ldr	r3, [pc, #500]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b7a      	ldr	r3, [pc, #488]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	4a78      	ldr	r2, [pc, #480]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001492:	4b76      	ldr	r3, [pc, #472]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a0:	4b72      	ldr	r3, [pc, #456]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a6:	4a71      	ldr	r2, [pc, #452]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b0:	4b6e      	ldr	r3, [pc, #440]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	4b6b      	ldr	r3, [pc, #428]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c4:	4a69      	ldr	r2, [pc, #420]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ce:	4b67      	ldr	r3, [pc, #412]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	4b63      	ldr	r3, [pc, #396]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e2:	4a62      	ldr	r2, [pc, #392]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ec:	4b5f      	ldr	r3, [pc, #380]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	f003 0204 	and.w	r2, r3, #4
 80014f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001504:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001508:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	4a56      	ldr	r2, [pc, #344]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151a:	4b54      	ldr	r3, [pc, #336]	@ (800166c <HAL_OSPI_MspInit+0x2dc>)
 800151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001520:	f003 0202 	and.w	r2, r3, #2
 8001524:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001536:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8001556:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800155a:	4619      	mov	r1, r3
 800155c:	4844      	ldr	r0, [pc, #272]	@ (8001670 <HAL_OSPI_MspInit+0x2e0>)
 800155e:	f000 feb5 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8001562:	2308      	movs	r3, #8
 8001564:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001580:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001584:	4619      	mov	r1, r3
 8001586:	483b      	ldr	r0, [pc, #236]	@ (8001674 <HAL_OSPI_MspInit+0x2e4>)
 8001588:	f000 fea0 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015a4:	230a      	movs	r3, #10
 80015a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015ae:	4619      	mov	r1, r3
 80015b0:	4831      	ldr	r0, [pc, #196]	@ (8001678 <HAL_OSPI_MspInit+0x2e8>)
 80015b2:	f000 fe8b 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80015b6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80015ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015d0:	230a      	movs	r3, #10
 80015d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015da:	4619      	mov	r1, r3
 80015dc:	4827      	ldr	r0, [pc, #156]	@ (800167c <HAL_OSPI_MspInit+0x2ec>)
 80015de:	f000 fe75 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80015e2:	2304      	movs	r3, #4
 80015e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8001600:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001604:	4619      	mov	r1, r3
 8001606:	481e      	ldr	r0, [pc, #120]	@ (8001680 <HAL_OSPI_MspInit+0x2f0>)
 8001608:	f000 fe60 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800160c:	2308      	movs	r3, #8
 800160e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001624:	230a      	movs	r3, #10
 8001626:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 800162a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800162e:	4619      	mov	r1, r3
 8001630:	4814      	ldr	r0, [pc, #80]	@ (8001684 <HAL_OSPI_MspInit+0x2f4>)
 8001632:	f000 fe4b 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8001636:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800163a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001650:	230a      	movs	r3, #10
 8001652:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800165a:	4619      	mov	r1, r3
 800165c:	480a      	ldr	r0, [pc, #40]	@ (8001688 <HAL_OSPI_MspInit+0x2f8>)
 800165e:	f000 fe35 	bl	80022cc <HAL_GPIO_Init>
    /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

    /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001662:	e0ed      	b.n	8001840 <HAL_OSPI_MspInit+0x4b0>
 8001664:	420d1400 	.word	0x420d1400
 8001668:	200008e4 	.word	0x200008e4
 800166c:	46020c00 	.word	0x46020c00
 8001670:	42022000 	.word	0x42022000
 8001674:	42021000 	.word	0x42021000
 8001678:	42020c00 	.word	0x42020c00
 800167c:	42021400 	.word	0x42021400
 8001680:	42021c00 	.word	0x42021c00
 8001684:	42020800 	.word	0x42020800
 8001688:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 800168c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001690:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6c      	ldr	r2, [pc, #432]	@ (800184c <HAL_OSPI_MspInit+0x4bc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	f040 80d0 	bne.w	8001840 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80016a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 ff7c 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 80016c2:	f7ff fd1f 	bl	8001104 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80016c6:	4b62      	ldr	r3, [pc, #392]	@ (8001850 <HAL_OSPI_MspInit+0x4c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a60      	ldr	r2, [pc, #384]	@ (8001850 <HAL_OSPI_MspInit+0x4c0>)
 80016ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80016d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001850 <HAL_OSPI_MspInit+0x4c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d116      	bne.n	8001706 <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80016d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016de:	4a5d      	ldr	r2, [pc, #372]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ee:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001704:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001706:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170c:	4a51      	ldr	r2, [pc, #324]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001716:	4b4f      	ldr	r3, [pc, #316]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001720:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001724:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001732:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173a:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001740:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001744:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800174e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001752:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800175c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001760:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001762:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001768:	4a3a      	ldr	r2, [pc, #232]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001778:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800177c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001780:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800178a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800178e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001790:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001796:	4a2f      	ldr	r2, [pc, #188]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 8001798:	f043 0320 	orr.w	r3, r3, #32
 800179c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <HAL_OSPI_MspInit+0x4c4>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a6:	f003 0220 	and.w	r2, r3, #32
 80017aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80017be:	2320      	movs	r3, #32
 80017c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80017d6:	2305      	movs	r3, #5
 80017d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80017e0:	4619      	mov	r1, r3
 80017e2:	481d      	ldr	r0, [pc, #116]	@ (8001858 <HAL_OSPI_MspInit+0x4c8>)
 80017e4:	f000 fd72 	bl	80022cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80017e8:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80017ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001802:	2305      	movs	r3, #5
 8001804:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001808:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800180c:	4619      	mov	r1, r3
 800180e:	4813      	ldr	r0, [pc, #76]	@ (800185c <HAL_OSPI_MspInit+0x4cc>)
 8001810:	f000 fd5c 	bl	80022cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8001814:	f241 031f 	movw	r3, #4127	@ 0x101f
 8001818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800182e:	2305      	movs	r3, #5
 8001830:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001834:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001838:	4619      	mov	r1, r3
 800183a:	4809      	ldr	r0, [pc, #36]	@ (8001860 <HAL_OSPI_MspInit+0x4d0>)
 800183c:	f000 fd46 	bl	80022cc <HAL_GPIO_Init>
}
 8001840:	bf00      	nop
 8001842:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	420d2400 	.word	0x420d2400
 8001850:	200008e4 	.word	0x200008e4
 8001854:	46020c00 	.word	0x46020c00
 8001858:	42022000 	.word	0x42022000
 800185c:	42021c00 	.word	0x42021c00
 8001860:	42021400 	.word	0x42021400

08001864 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0be      	sub	sp, #248	@ 0xf8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	22c8      	movs	r2, #200	@ 0xc8
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f007 fe92 	bl	80095ae <memset>
  if(hspi->Instance==SPI2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a39      	ldr	r2, [pc, #228]	@ (8001974 <HAL_SPI_MspInit+0x110>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d16b      	bne.n	800196c <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80018a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fe81 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80018b8:	f7ff fc24 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e0:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_SPI_MspInit+0x114>)
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001916:	231a      	movs	r3, #26
 8001918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192e:	2305      	movs	r3, #5
 8001930:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001938:	4619      	mov	r1, r3
 800193a:	4810      	ldr	r0, [pc, #64]	@ (800197c <HAL_SPI_MspInit+0x118>)
 800193c:	f000 fcc6 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195a:	2305      	movs	r3, #5
 800195c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	@ (8001980 <HAL_SPI_MspInit+0x11c>)
 8001968:	f000 fcb0 	bl	80022cc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800196c:	bf00      	nop
 800196e:	37f8      	adds	r7, #248	@ 0xf8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40003800 	.word	0x40003800
 8001978:	46020c00 	.word	0x46020c00
 800197c:	42020c00 	.word	0x42020c00
 8001980:	42020400 	.word	0x42020400

08001984 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0be      	sub	sp, #248	@ 0xf8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	f107 0318 	add.w	r3, r7, #24
 80019a0:	22c8      	movs	r2, #200	@ 0xc8
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fe02 	bl	80095ae <memset>
  if(huart->Instance==UART4)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae0 <HAL_UART_MspInit+0x15c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d146      	bne.n	8001a42 <HAL_UART_MspInit+0xbe>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019b4:	f04f 0208 	mov.w	r2, #8
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fdf3 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80019d4:	f7ff fb96 	bl	8001104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019d8:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 80019da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019de:	4a41      	ldr	r2, [pc, #260]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 80019e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80019e8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 80019ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 80019f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fc:	4a39      	ldr	r2, [pc, #228]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001a14:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <HAL_UART_MspInit+0x164>)
 8001a3c:	f000 fc46 	bl	80022cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a40:	e04a      	b.n	8001ad8 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a29      	ldr	r2, [pc, #164]	@ (8001aec <HAL_UART_MspInit+0x168>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d145      	bne.n	8001ad8 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a4c:	f04f 0201 	mov.w	r2, #1
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fda7 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001a6c:	f7ff fb4a 	bl	8001104 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a94:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_UART_MspInit+0x160>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001aac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <HAL_UART_MspInit+0x16c>)
 8001ad4:	f000 fbfa 	bl	80022cc <HAL_GPIO_Init>
}
 8001ad8:	bf00      	nop
 8001ada:	37f8      	adds	r7, #248	@ 0xf8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40004c00 	.word	0x40004c00
 8001ae4:	46020c00 	.word	0x46020c00
 8001ae8:	42020800 	.word	0x42020800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	42020000 	.word	0x42020000

08001af4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0be      	sub	sp, #248	@ 0xf8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	22c8      	movs	r2, #200	@ 0xc8
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f007 fd4a 	bl	80095ae <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a38      	ldr	r2, [pc, #224]	@ (8001c00 <HAL_PCD_MspInit+0x10c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d169      	bne.n	8001bf8 <HAL_PCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fd3a 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001b46:	f7ff fadd 	bl	8001104 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b50:	4a2c      	ldr	r2, [pc, #176]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001b68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b82:	230a      	movs	r3, #10
 8001b84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481e      	ldr	r0, [pc, #120]	@ (8001c08 <HAL_PCD_MspInit+0x114>)
 8001b90:	f000 fb9c 	bl	80022cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d119      	bne.n	8001bf4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001bde:	f002 fa1d 	bl	800401c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be8:	4a06      	ldr	r2, [pc, #24]	@ (8001c04 <HAL_PCD_MspInit+0x110>)
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001bf2:	e001      	b.n	8001bf8 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001bf4:	f002 fa12 	bl	800401c <HAL_PWREx_EnableVddUSB>
}
 8001bf8:	bf00      	nop
 8001bfa:	37f8      	adds	r7, #248	@ 0xf8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	42040000 	.word	0x42040000
 8001c04:	46020c00 	.word	0x46020c00
 8001c08:	42020000 	.word	0x42020000

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <NMI_Handler+0x4>

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <MemManage_Handler+0x4>

08001c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c62:	f000 f90b 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <SystemInit+0x68>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <SystemInit+0x68>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <SystemInit+0x6c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <SystemInit+0x6c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <SystemInit+0x6c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <SystemInit+0x6c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <SystemInit+0x6c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <SystemInit+0x6c>)
 8001c9e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ca2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <SystemInit+0x6c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <SystemInit+0x6c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <SystemInit+0x6c>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <SystemInit+0x6c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <SystemInit+0x68>)
 8001cc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cc6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	46020c00 	.word	0x46020c00

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d14 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce0:	f7ff ffc4 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ce6:	e003      	b.n	8001cf0 <LoopCopyDataInit>

08001ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cee:	3104      	adds	r1, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf0:	480a      	ldr	r0, [pc, #40]	@ (8001d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cf8:	d3f6      	bcc.n	8001ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cfc:	e002      	b.n	8001d04 <LoopFillZerobss>

08001cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d00:	f842 3b04 	str.w	r3, [r2], #4

08001d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <LoopForever+0x16>)
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d08:	d3f9      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f007 fc59 	bl	80095c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7fe fca9 	bl	8000664 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d14:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d18:	08009730 	.word	0x08009730
	ldr	r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d20:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001d24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001d28:	20000910 	.word	0x20000910

08001d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_Init+0x50>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_Init+0x50>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f96e 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d46:	f003 fa57 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_Init+0x54>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <HAL_Init+0x58>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d8c <HAL_Init+0x5c>)
 8001d5e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d60:	2004      	movs	r0, #4
 8001d62:	f000 f9a5 	bl	80020b0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f812 	bl	8001d90 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e002      	b.n	8001d7c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d76:	f7ff f9cb 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40022000 	.word	0x40022000
 8001d84:	46020c00 	.word	0x46020c00
 8001d88:	08009620 	.word	0x08009620
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d9c:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05c      	b.n	8001e62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_InitTick+0xe0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d10c      	bne.n	8001dce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <HAL_InitTick+0xe4>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e037      	b.n	8001e3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001dce:	f000 f9c7 	bl	8002160 <HAL_SYSTICK_GetCLKSourceConfig>
 8001dd2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d023      	beq.n	8001e22 <HAL_InitTick+0x92>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d82d      	bhi.n	8001e3c <HAL_InitTick+0xac>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_InitTick+0x5e>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d00d      	beq.n	8001e08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001dec:	e026      	b.n	8001e3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <HAL_InitTick+0xe4>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001dfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
        break;
 8001e06:	e01a      	b.n	8001e3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	60fb      	str	r3, [r7, #12]
        break;
 8001e20:	e00d      	b.n	8001e3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	60fb      	str	r3, [r7, #12]
        break;
 8001e3a:	e000      	b.n	8001e3e <HAL_InitTick+0xae>
        break;
 8001e3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f914 	bl	800206c <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e009      	b.n	8001e62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	f000 f8ef 	bl	8002038 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e5a:	4a07      	ldr	r2, [pc, #28]	@ (8001e78 <HAL_InitTick+0xe8>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	e000e010 	.word	0xe000e010
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	200008e8 	.word	0x200008e8

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200008e8 	.word	0x200008e8

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff6a 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002046:	f7ff ff81 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 800204a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffb3 	bl	8001fbc <NVIC_EncodePriority>
 8002056:	4602      	mov	r2, r0
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff82 	bl	8001f68 <__NVIC_SetPriority>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d301      	bcc.n	8002082 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800207e:	2301      	movs	r3, #1
 8002080:	e00d      	b.n	800209e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002096:	f043 0303 	orr.w	r3, r3, #3
 800209a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d844      	bhi.n	8002148 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020e7 	.word	0x080020e7
 80020c8:	08002105 	.word	0x08002105
 80020cc:	08002127 	.word	0x08002127
 80020d0:	08002149 	.word	0x08002149
 80020d4:	080020d9 	.word	0x080020d9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6013      	str	r3, [r2, #0]
      break;
 80020e4:	e031      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020fa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002102:	e022      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a13      	ldr	r2, [pc, #76]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002116:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800211c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002124:	e011      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800213e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002146:	e000      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002148:	bf00      	nop
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010
 800215c:	46020c00 	.word	0x46020c00

08002160 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002172:	2304      	movs	r3, #4
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	e021      	b.n	80021bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002182:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800218a:	d011      	beq.n	80021b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002192:	d810      	bhi.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a0:	d003      	beq.n	80021aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80021a2:	e008      	b.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
        break;
 80021a8:	e008      	b.n	80021bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021aa:	2301      	movs	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
        break;
 80021ae:	e005      	b.n	80021bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80021b0:	2302      	movs	r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
        break;
 80021b4:	e002      	b.n	80021bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
        break;
 80021ba:	bf00      	nop
    }
  }
  return systick_source;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010
 80021d0:	46020c00 	.word	0x46020c00

080021d4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80021dc:	f7ff fe62 	bl	8001ea4 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e06b      	b.n	80022c4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e05c      	b.n	80022c4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0204 	orr.w	r2, r2, #4
 8002218:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002222:	e020      	b.n	8002266 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002224:	f7ff fe3e 	bl	8001ea4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b05      	cmp	r3, #5
 8002230:	d919      	bls.n	8002266 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	f043 0210 	orr.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002256:	2201      	movs	r2, #1
 8002258:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e02e      	b.n	80022c4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0d7      	beq.n	8002224 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0202 	orr.w	r2, r2, #2
 8002282:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002294:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ae:	2201      	movs	r2, #1
 80022b0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022de:	e1ba      	b.n	8002656 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 81aa 	beq.w	8002650 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a55      	ldr	r2, [pc, #340]	@ (8002454 <HAL_GPIO_Init+0x188>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d15d      	bne.n	80023c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	4013      	ands	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	4313      	orrs	r3, r2
 800232c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002334:	4a48      	ldr	r2, [pc, #288]	@ (8002458 <HAL_GPIO_Init+0x18c>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800233c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800233e:	4a46      	ldr	r2, [pc, #280]	@ (8002458 <HAL_GPIO_Init+0x18c>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	4013      	ands	r3, r2
 800236c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220b      	movs	r2, #11
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	4313      	orrs	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	3208      	adds	r2, #8
 800238a:	69f9      	ldr	r1, [r7, #28]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2202      	movs	r2, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e067      	b.n	8002490 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x104>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d145      	bne.n	800245c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	4313      	orrs	r3, r2
 800240c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	4013      	ands	r3, r2
 8002432:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	4313      	orrs	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e01e      	b.n	8002490 <HAL_GPIO_Init+0x1c4>
 8002452:	bf00      	nop
 8002454:	46020000 	.word	0x46020000
 8002458:	08009678 	.word	0x08009678
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	4013      	ands	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	4313      	orrs	r3, r2
 8002488:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d00b      	beq.n	80024b0 <HAL_GPIO_Init+0x1e4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d007      	beq.n	80024b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80024e6:	2201      	movs	r2, #1
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4313      	orrs	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d017      	beq.n	800254a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	4013      	ands	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4313      	orrs	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07c      	beq.n	8002650 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002556:	4a47      	ldr	r2, [pc, #284]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3318      	adds	r3, #24
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	4013      	ands	r3, r2
 8002578:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0a9a      	lsrs	r2, r3, #10
 800257e:	4b3e      	ldr	r3, [pc, #248]	@ (8002678 <HAL_GPIO_Init+0x3ac>)
 8002580:	4013      	ands	r3, r2
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	00d2      	lsls	r2, r2, #3
 800258a:	4093      	lsls	r3, r2
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	4313      	orrs	r3, r2
 8002590:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002592:	4938      	ldr	r1, [pc, #224]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3318      	adds	r3, #24
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80025c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80025ee:	4a21      	ldr	r2, [pc, #132]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 80025f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	4013      	ands	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800261a:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 8002624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002628:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	4013      	ands	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_GPIO_Init+0x3a8>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	f47f ae3d 	bne.w	80022e0 <HAL_GPIO_Init+0x14>
  }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	3724      	adds	r7, #36	@ 0x24
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	46022000 	.word	0x46022000
 8002678:	002f7f7f 	.word	0x002f7f7f

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43d9      	mvns	r1, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e08d      	b.n	800280e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fd88 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	@ 0x24
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e006      	b.n	8002768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d108      	bne.n	8002782 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e007      	b.n	8002792 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69d9      	ldr	r1, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	d138      	bne.n	800289e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002836:	2302      	movs	r3, #2
 8002838:	e032      	b.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2224      	movs	r2, #36	@ 0x24
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002868:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d139      	bne.n	8002936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e033      	b.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e007      	b.n	8002972 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002962:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0204 	bic.w	r2, r3, #4
 800296a:	4905      	ldr	r1, [pc, #20]	@ (8002980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40030400 	.word	0x40030400

08002984 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_ICACHE_Enable+0x1c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <HAL_ICACHE_Enable+0x1c>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40030400 	.word	0x40030400

080029a4 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e141      	b.n	8002c40 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f947 	bl	8002c54 <MDF_GetHandleNumberFromInstance>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a86      	ldr	r2, [pc, #536]	@ (8002be4 <HAL_MDF_Init+0x240>)
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e133      	b.n	8002c40 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fbb5 	bl	8001148 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80029de:	4b82      	ldr	r3, [pc, #520]	@ (8002be8 <HAL_MDF_Init+0x244>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11d      	bne.n	8002a22 <HAL_MDF_Init+0x7e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a80      	ldr	r2, [pc, #512]	@ (8002bec <HAL_MDF_Init+0x248>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d023      	beq.n	8002a38 <HAL_MDF_Init+0x94>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7e      	ldr	r2, [pc, #504]	@ (8002bf0 <HAL_MDF_Init+0x24c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01e      	beq.n	8002a38 <HAL_MDF_Init+0x94>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7d      	ldr	r2, [pc, #500]	@ (8002bf4 <HAL_MDF_Init+0x250>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d019      	beq.n	8002a38 <HAL_MDF_Init+0x94>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7b      	ldr	r2, [pc, #492]	@ (8002bf8 <HAL_MDF_Init+0x254>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d014      	beq.n	8002a38 <HAL_MDF_Init+0x94>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7a      	ldr	r2, [pc, #488]	@ (8002bfc <HAL_MDF_Init+0x258>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00f      	beq.n	8002a38 <HAL_MDF_Init+0x94>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a78      	ldr	r2, [pc, #480]	@ (8002c00 <HAL_MDF_Init+0x25c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00a      	beq.n	8002a38 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002a22:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <HAL_MDF_Init+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 8090 	bne.w	8002b4c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a75      	ldr	r2, [pc, #468]	@ (8002c08 <HAL_MDF_Init+0x264>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f040 808a 	bne.w	8002b4c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a72      	ldr	r2, [pc, #456]	@ (8002c08 <HAL_MDF_Init+0x264>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_MDF_Init+0xa2>
 8002a42:	4b72      	ldr	r3, [pc, #456]	@ (8002c0c <HAL_MDF_Init+0x268>)
 8002a44:	e000      	b.n	8002a48 <HAL_MDF_Init+0xa4>
 8002a46:	4b72      	ldr	r3, [pc, #456]	@ (8002c10 <HAL_MDF_Init+0x26c>)
 8002a48:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da02      	bge.n	8002a58 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e079      	b.n	8002b4c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a63      	ldr	r2, [pc, #396]	@ (8002bec <HAL_MDF_Init+0x248>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_MDF_Init+0xf0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a62      	ldr	r2, [pc, #392]	@ (8002bf0 <HAL_MDF_Init+0x24c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_MDF_Init+0xf0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a60      	ldr	r2, [pc, #384]	@ (8002bf4 <HAL_MDF_Init+0x250>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_MDF_Init+0xf0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <HAL_MDF_Init+0x254>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_MDF_Init+0xf0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5d      	ldr	r2, [pc, #372]	@ (8002bfc <HAL_MDF_Init+0x258>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_MDF_Init+0xf0>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c00 <HAL_MDF_Init+0x25c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10d      	bne.n	8002ab0 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d137      	bne.n	8002b40 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002ae0:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002ae8:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7e1b      	ldrb	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d123      	bne.n	8002b40 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bec <HAL_MDF_Init+0x248>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d012      	beq.n	8002b28 <HAL_MDF_Init+0x184>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf0 <HAL_MDF_Init+0x24c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <HAL_MDF_Init+0x184>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_MDF_Init+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d008      	beq.n	8002b28 <HAL_MDF_Init+0x184>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <HAL_MDF_Init+0x254>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <HAL_MDF_Init+0x184>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a35      	ldr	r2, [pc, #212]	@ (8002bfc <HAL_MDF_Init+0x258>)
 8002b26:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002b34:	430b      	orrs	r3, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 0210 	orr.w	r2, r3, #16
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d128      	bne.n	8002ba4 <HAL_MDF_Init+0x200>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d123      	bne.n	8002ba4 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da02      	bge.n	8002b6c <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e01b      	b.n	8002ba4 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002b84:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d14a      	bne.n	8002c40 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 021f 	bic.w	r2, r2, #31
 8002bb8:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <HAL_MDF_Init+0x264>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11e      	bne.n	8002c14 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_MDF_Init+0x260>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <HAL_MDF_Init+0x260>)
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e01d      	b.n	8002c1e <HAL_MDF_Init+0x27a>
 8002be2:	bf00      	nop
 8002be4:	200008f4 	.word	0x200008f4
 8002be8:	200008ec 	.word	0x200008ec
 8002bec:	40025080 	.word	0x40025080
 8002bf0:	40025100 	.word	0x40025100
 8002bf4:	40025180 	.word	0x40025180
 8002bf8:	40025200 	.word	0x40025200
 8002bfc:	40025280 	.word	0x40025280
 8002c00:	40025300 	.word	0x40025300
 8002c04:	200008f0 	.word	0x200008f0
 8002c08:	46024080 	.word	0x46024080
 8002c0c:	46024000 	.word	0x46024000
 8002c10:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_MDF_Init+0x2a8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <HAL_MDF_Init+0x2a8>)
 8002c1c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f816 	bl	8002c54 <MDF_GetHandleNumberFromInstance>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4909      	ldr	r1, [pc, #36]	@ (8002c50 <HAL_MDF_Init+0x2ac>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200008ec 	.word	0x200008ec
 8002c50:	200008f4 	.word	0x200008f4

08002c54 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <MDF_GetHandleNumberFromInstance+0x70>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e024      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <MDF_GetHandleNumberFromInstance+0x74>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002c72:	2301      	movs	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e01d      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <MDF_GetHandleNumberFromInstance+0x78>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002c80:	2302      	movs	r3, #2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e016      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <MDF_GetHandleNumberFromInstance+0x7c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d102      	bne.n	8002c94 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e00f      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd4 <MDF_GetHandleNumberFromInstance+0x80>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e008      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <MDF_GetHandleNumberFromInstance+0x84>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d102      	bne.n	8002cb0 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002caa:	2305      	movs	r3, #5
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e001      	b.n	8002cb4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002cb0:	2306      	movs	r3, #6
 8002cb2:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40025080 	.word	0x40025080
 8002cc8:	40025100 	.word	0x40025100
 8002ccc:	40025180 	.word	0x40025180
 8002cd0:	40025200 	.word	0x40025200
 8002cd4:	40025280 	.word	0x40025280
 8002cd8:	40025300 	.word	0x40025300

08002cdc <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff f8cc 	bl	8001ea4 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e0a5      	b.n	8002e66 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 809e 	bne.w	8002e66 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fb30 	bl	8001390 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002d30:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f912 	bl	8002f5e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <HAL_OSPI_Init+0x174>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68d1      	ldr	r1, [r2, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6912      	ldr	r2, [r2, #16]
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	0412      	lsls	r2, r2, #16
 8002d50:	4311      	orrs	r1, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6952      	ldr	r2, [r2, #20]
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0212      	lsls	r2, r2, #8
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	69d2      	ldr	r2, [r2, #28]
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002da0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fdcd 	bl	8003968 <OSPI_WaitFlagStateUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d146      	bne.n	8002e66 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1e5a      	subs	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e0e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0202 	orr.w	r2, r2, #2
 8002e4c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e56:	d103      	bne.n	8002e60 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e5e:	e002      	b.n	8002e66 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	f8e0c0f4 	.word	0xf8e0c0f4

08002e74 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff f810 	bl	8001ea4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_OSPI_Abort+0x2c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d052      	beq.n	8002f46 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d014      	beq.n	8002ed8 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0204 	bic.w	r2, r2, #4
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f986 	bl	80021d4 <HAL_DMA_Abort>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02b      	beq.n	8002f3e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0202 	orr.w	r2, r2, #2
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2201      	movs	r2, #1
 8002f00:	2102      	movs	r1, #2
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fd30 	bl	8003968 <OSPI_WaitFlagStateUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11f      	bne.n	8002f52 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2202      	movs	r2, #2
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2120      	movs	r1, #32
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fd1e 	bl	8003968 <OSPI_WaitFlagStateUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f3c:	e009      	b.n	8002f52 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f44:	e005      	b.n	8002f52 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f50:	e000      	b.n	8002f54 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f52:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b094      	sub	sp, #80	@ 0x50
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a9d      	ldr	r2, [pc, #628]	@ (8003210 <HAL_OSPIM_Config+0x294>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d105      	bne.n	8002faa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002fa8:	e004      	b.n	8002fb4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002faa:	2301      	movs	r3, #1
 8002fac:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002fba:	e01d      	b.n	8002ff8 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002fbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2d8      	uxtb	r0, r3
 8002fc4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002fc8:	f107 0114 	add.w	r1, r7, #20
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f000 fd06 	bl	80039e8 <OSPIM_GetConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2208      	movs	r2, #8
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002fee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d9dd      	bls.n	8002fbc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003000:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 84a2 	bne.w	800394e <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800300a:	4b81      	ldr	r3, [pc, #516]	@ (8003210 <HAL_OSPIM_Config+0x294>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003016:	4b7e      	ldr	r3, [pc, #504]	@ (8003210 <HAL_OSPIM_Config+0x294>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7d      	ldr	r2, [pc, #500]	@ (8003210 <HAL_OSPIM_Config+0x294>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003022:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800302e:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <HAL_OSPIM_Config+0x298>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_OSPIM_Config+0x298>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_OSPIM_Config+0x298>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003046:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003052:	4971      	ldr	r1, [pc, #452]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 8003054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	3350      	adds	r3, #80	@ 0x50
 8003060:	443b      	add	r3, r7
 8003062:	3b34      	subs	r3, #52	@ 0x34
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	486a      	ldr	r0, [pc, #424]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 8003070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	3350      	adds	r3, #80	@ 0x50
 800307c:	443b      	add	r3, r7
 800307e:	3b34      	subs	r3, #52	@ 0x34
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4403      	add	r3, r0
 800308c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800308e:	4b62      	ldr	r3, [pc, #392]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80c0 	beq.w	800321c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800309c:	4b5e      	ldr	r3, [pc, #376]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80030a8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8162 	bne.w	8003376 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80030b2:	4959      	ldr	r1, [pc, #356]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 80030b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3350      	adds	r3, #80	@ 0x50
 80030c2:	443b      	add	r3, r7
 80030c4:	3b3c      	subs	r3, #60	@ 0x3c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	4851      	ldr	r0, [pc, #324]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 80030d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	3350      	adds	r3, #80	@ 0x50
 80030e0:	443b      	add	r3, r7
 80030e2:	3b3c      	subs	r3, #60	@ 0x3c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f041 0202 	orr.w	r2, r1, #2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4403      	add	r3, r0
 80030f0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80030f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3350      	adds	r3, #80	@ 0x50
 8003100:	443b      	add	r3, r7
 8003102:	3b38      	subs	r3, #56	@ 0x38
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01f      	beq.n	800314a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800310a:	4943      	ldr	r1, [pc, #268]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 800310c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	3350      	adds	r3, #80	@ 0x50
 800311a:	443b      	add	r3, r7
 800311c:	3b38      	subs	r3, #56	@ 0x38
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	483b      	ldr	r0, [pc, #236]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 800312a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	3350      	adds	r3, #80	@ 0x50
 8003138:	443b      	add	r3, r7
 800313a:	3b38      	subs	r3, #56	@ 0x38
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	f041 0220 	orr.w	r2, r1, #32
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800314a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	3350      	adds	r3, #80	@ 0x50
 8003158:	443b      	add	r3, r7
 800315a:	3b30      	subs	r3, #48	@ 0x30
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8003162:	492d      	ldr	r1, [pc, #180]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 8003164:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3350      	adds	r3, #80	@ 0x50
 8003172:	443b      	add	r3, r7
 8003174:	3b30      	subs	r3, #48	@ 0x30
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	4824      	ldr	r0, [pc, #144]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 8003186:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	3350      	adds	r3, #80	@ 0x50
 8003194:	443b      	add	r3, r7
 8003196:	3b30      	subs	r3, #48	@ 0x30
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3b01      	subs	r3, #1
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80031aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	3350      	adds	r3, #80	@ 0x50
 80031b8:	443b      	add	r3, r7
 80031ba:	3b2c      	subs	r3, #44	@ 0x2c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80d9 	beq.w	8003376 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80031c4:	4914      	ldr	r1, [pc, #80]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 80031c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	3350      	adds	r3, #80	@ 0x50
 80031d4:	443b      	add	r3, r7
 80031d6:	3b2c      	subs	r3, #44	@ 0x2c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	480c      	ldr	r0, [pc, #48]	@ (8003218 <HAL_OSPIM_Config+0x29c>)
 80031e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3350      	adds	r3, #80	@ 0x50
 80031f6:	443b      	add	r3, r7
 80031f8:	3b2c      	subs	r3, #44	@ 0x2c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4403      	add	r3, r0
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	e0b3      	b.n	8003376 <HAL_OSPIM_Config+0x3fa>
 800320e:	bf00      	nop
 8003210:	420d1400 	.word	0x420d1400
 8003214:	420d2400 	.word	0x420d2400
 8003218:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800321c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	3350      	adds	r3, #80	@ 0x50
 8003228:	443b      	add	r3, r7
 800322a:	3b3c      	subs	r3, #60	@ 0x3c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a1 	beq.w	8003376 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003234:	4995      	ldr	r1, [pc, #596]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	3350      	adds	r3, #80	@ 0x50
 8003242:	443b      	add	r3, r7
 8003244:	3b3c      	subs	r3, #60	@ 0x3c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3b01      	subs	r3, #1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	488e      	ldr	r0, [pc, #568]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3350      	adds	r3, #80	@ 0x50
 800325e:	443b      	add	r3, r7
 8003260:	3b3c      	subs	r3, #60	@ 0x3c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3b01      	subs	r3, #1
 8003266:	f021 0201 	bic.w	r2, r1, #1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	3350      	adds	r3, #80	@ 0x50
 800327c:	443b      	add	r3, r7
 800327e:	3b38      	subs	r3, #56	@ 0x38
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003286:	4981      	ldr	r1, [pc, #516]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	3350      	adds	r3, #80	@ 0x50
 8003294:	443b      	add	r3, r7
 8003296:	3b38      	subs	r3, #56	@ 0x38
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	487a      	ldr	r0, [pc, #488]	@ (800348c <HAL_OSPIM_Config+0x510>)
 80032a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	3350      	adds	r3, #80	@ 0x50
 80032b0:	443b      	add	r3, r7
 80032b2:	3b38      	subs	r3, #56	@ 0x38
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f021 0210 	bic.w	r2, r1, #16
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80032c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	3350      	adds	r3, #80	@ 0x50
 80032ce:	443b      	add	r3, r7
 80032d0:	3b30      	subs	r3, #48	@ 0x30
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d021      	beq.n	800331c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80032d8:	496c      	ldr	r1, [pc, #432]	@ (800348c <HAL_OSPIM_Config+0x510>)
 80032da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	3350      	adds	r3, #80	@ 0x50
 80032e6:	443b      	add	r3, r7
 80032e8:	3b30      	subs	r3, #48	@ 0x30
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	4864      	ldr	r0, [pc, #400]	@ (800348c <HAL_OSPIM_Config+0x510>)
 80032fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	3350      	adds	r3, #80	@ 0x50
 8003306:	443b      	add	r3, r7
 8003308:	3b30      	subs	r3, #48	@ 0x30
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4403      	add	r3, r0
 800331a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800331c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	3350      	adds	r3, #80	@ 0x50
 8003328:	443b      	add	r3, r7
 800332a:	3b2c      	subs	r3, #44	@ 0x2c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d021      	beq.n	8003376 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003332:	4956      	ldr	r1, [pc, #344]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3350      	adds	r3, #80	@ 0x50
 8003340:	443b      	add	r3, r7
 8003342:	3b2c      	subs	r3, #44	@ 0x2c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	484e      	ldr	r0, [pc, #312]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	3350      	adds	r3, #80	@ 0x50
 8003360:	443b      	add	r3, r7
 8003362:	3b2c      	subs	r3, #44	@ 0x2c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3b01      	subs	r3, #1
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4403      	add	r3, r0
 8003374:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	3350      	adds	r3, #80	@ 0x50
 8003388:	443b      	add	r3, r7
 800338a:	3b3c      	subs	r3, #60	@ 0x3c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4299      	cmp	r1, r3
 8003390:	d03c      	beq.n	800340c <HAL_OSPIM_Config+0x490>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	3350      	adds	r3, #80	@ 0x50
 80033a4:	443b      	add	r3, r7
 80033a6:	3b34      	subs	r3, #52	@ 0x34
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4299      	cmp	r1, r3
 80033ac:	d02e      	beq.n	800340c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3350      	adds	r3, #80	@ 0x50
 80033c0:	443b      	add	r3, r7
 80033c2:	3b38      	subs	r3, #56	@ 0x38
 80033c4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80033c6:	4299      	cmp	r1, r3
 80033c8:	d103      	bne.n	80033d2 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d11c      	bne.n	800340c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	3350      	adds	r3, #80	@ 0x50
 80033e4:	443b      	add	r3, r7
 80033e6:	3b30      	subs	r3, #48	@ 0x30
 80033e8:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80033ea:	4299      	cmp	r1, r3
 80033ec:	d00e      	beq.n	800340c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3350      	adds	r3, #80	@ 0x50
 8003400:	443b      	add	r3, r7
 8003402:	3b2c      	subs	r3, #44	@ 0x2c
 8003404:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003406:	4299      	cmp	r1, r3
 8003408:	f040 810e 	bne.w	8003628 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	3350      	adds	r3, #80	@ 0x50
 800341e:	443b      	add	r3, r7
 8003420:	3b3c      	subs	r3, #60	@ 0x3c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4299      	cmp	r1, r3
 8003426:	d133      	bne.n	8003490 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	3350      	adds	r3, #80	@ 0x50
 800343a:	443b      	add	r3, r7
 800343c:	3b38      	subs	r3, #56	@ 0x38
 800343e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003440:	4299      	cmp	r1, r3
 8003442:	d125      	bne.n	8003490 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	68d9      	ldr	r1, [r3, #12]
 8003448:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	3350      	adds	r3, #80	@ 0x50
 8003456:	443b      	add	r3, r7
 8003458:	3b30      	subs	r3, #48	@ 0x30
 800345a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800345c:	4299      	cmp	r1, r3
 800345e:	d117      	bne.n	8003490 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6919      	ldr	r1, [r3, #16]
 8003464:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	3350      	adds	r3, #80	@ 0x50
 8003472:	443b      	add	r3, r7
 8003474:	3b2c      	subs	r3, #44	@ 0x2c
 8003476:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003478:	4299      	cmp	r1, r3
 800347a:	d109      	bne.n	8003490 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_OSPIM_Config+0x510>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a02      	ldr	r2, [pc, #8]	@ (800348c <HAL_OSPIM_Config+0x510>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e0ce      	b.n	8003628 <HAL_OSPIM_Config+0x6ac>
 800348a:	bf00      	nop
 800348c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003490:	49a4      	ldr	r1, [pc, #656]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003492:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	3350      	adds	r3, #80	@ 0x50
 80034a0:	443b      	add	r3, r7
 80034a2:	3b3c      	subs	r3, #60	@ 0x3c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	489d      	ldr	r0, [pc, #628]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80034b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3350      	adds	r3, #80	@ 0x50
 80034be:	443b      	add	r3, r7
 80034c0:	3b3c      	subs	r3, #60	@ 0x3c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f021 0201 	bic.w	r2, r1, #1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80034d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	3350      	adds	r3, #80	@ 0x50
 80034de:	443b      	add	r3, r7
 80034e0:	3b38      	subs	r3, #56	@ 0x38
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01f      	beq.n	8003528 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80034e8:	498e      	ldr	r1, [pc, #568]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80034ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	3350      	adds	r3, #80	@ 0x50
 80034f8:	443b      	add	r3, r7
 80034fa:	3b38      	subs	r3, #56	@ 0x38
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3b01      	subs	r3, #1
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	4887      	ldr	r0, [pc, #540]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003508:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	3350      	adds	r3, #80	@ 0x50
 8003516:	443b      	add	r3, r7
 8003518:	3b38      	subs	r3, #56	@ 0x38
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	f021 0210 	bic.w	r2, r1, #16
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4403      	add	r3, r0
 8003526:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003528:	497e      	ldr	r1, [pc, #504]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800352a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	3350      	adds	r3, #80	@ 0x50
 8003538:	443b      	add	r3, r7
 800353a:	3b34      	subs	r3, #52	@ 0x34
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3b01      	subs	r3, #1
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	4877      	ldr	r0, [pc, #476]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003548:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	3350      	adds	r3, #80	@ 0x50
 8003556:	443b      	add	r3, r7
 8003558:	3b34      	subs	r3, #52	@ 0x34
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003568:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3350      	adds	r3, #80	@ 0x50
 8003576:	443b      	add	r3, r7
 8003578:	3b30      	subs	r3, #48	@ 0x30
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003580:	4968      	ldr	r1, [pc, #416]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003582:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	3350      	adds	r3, #80	@ 0x50
 8003590:	443b      	add	r3, r7
 8003592:	3b30      	subs	r3, #48	@ 0x30
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	4860      	ldr	r0, [pc, #384]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80035a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	3350      	adds	r3, #80	@ 0x50
 80035b2:	443b      	add	r3, r7
 80035b4:	3b30      	subs	r3, #48	@ 0x30
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80035c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	3350      	adds	r3, #80	@ 0x50
 80035d6:	443b      	add	r3, r7
 80035d8:	3b2c      	subs	r3, #44	@ 0x2c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035e0:	4950      	ldr	r1, [pc, #320]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80035e2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3350      	adds	r3, #80	@ 0x50
 80035f0:	443b      	add	r3, r7
 80035f2:	3b2c      	subs	r3, #44	@ 0x2c
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	4848      	ldr	r0, [pc, #288]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003604:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3350      	adds	r3, #80	@ 0x50
 8003612:	443b      	add	r3, r7
 8003614:	3b2c      	subs	r3, #44	@ 0x2c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4403      	add	r3, r0
 8003626:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003628:	4a3e      	ldr	r2, [pc, #248]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	3b01      	subs	r3, #1
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800363a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363c:	025b      	lsls	r3, r3, #9
 800363e:	431a      	orrs	r2, r3
 8003640:	4938      	ldr	r1, [pc, #224]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <HAL_OSPIM_Config+0x710>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003662:	d813      	bhi.n	800368c <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	4b2e      	ldr	r3, [pc, #184]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	429a      	cmp	r2, r3
 8003674:	d90a      	bls.n	800368c <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003676:	4b2b      	ldr	r3, [pc, #172]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	4927      	ldr	r1, [pc, #156]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800368c:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 809a 	beq.w	80037ce <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800369a:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	491d      	ldr	r1, [pc, #116]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d011      	beq.n	80036ea <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80036c6:	4a17      	ldr	r2, [pc, #92]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036d8:	4912      	ldr	r1, [pc, #72]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f042 0210 	orr.w	r2, r2, #16
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d018      	beq.n	8003728 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800370c:	4905      	ldr	r1, [pc, #20]	@ (8003724 <HAL_OSPIM_Config+0x7a8>)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e01b      	b.n	800375c <HAL_OSPIM_Config+0x7e0>
 8003724:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003730:	4a8a      	ldr	r2, [pc, #552]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003746:	4985      	ldr	r1, [pc, #532]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	3b01      	subs	r3, #1
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003768:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	3b01      	subs	r3, #1
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800377e:	4977      	ldr	r1, [pc, #476]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	3b01      	subs	r3, #1
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	e0c3      	b.n	800391e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80bf 	beq.w	800391e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037a0:	4a6e      	ldr	r2, [pc, #440]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80037b6:	4969      	ldr	r1, [pc, #420]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	3b01      	subs	r3, #1
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e0a7      	b.n	800391e <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80037ce:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f023 0203 	bic.w	r2, r3, #3
 80037e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	495d      	ldr	r1, [pc, #372]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d014      	beq.n	800382a <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003800:	4a56      	ldr	r2, [pc, #344]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	431a      	orrs	r2, r3
 8003818:	4950      	ldr	r1, [pc, #320]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	f042 0210 	orr.w	r2, r2, #16
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003836:	4a49      	ldr	r2, [pc, #292]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	3b01      	subs	r3, #1
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800384c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384e:	049b      	lsls	r3, r3, #18
 8003850:	431a      	orrs	r2, r3
 8003852:	4942      	ldr	r1, [pc, #264]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	3b01      	subs	r3, #1
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e01c      	b.n	80038a4 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003872:	4a3a      	ldr	r2, [pc, #232]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	3b01      	subs	r3, #1
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388a:	069b      	lsls	r3, r3, #26
 800388c:	431a      	orrs	r2, r3
 800388e:	4933      	ldr	r1, [pc, #204]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	3b01      	subs	r3, #1
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d019      	beq.n	80038e4 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038b0:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80038c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c8:	049b      	lsls	r3, r3, #18
 80038ca:	431a      	orrs	r2, r3
 80038cc:	4923      	ldr	r1, [pc, #140]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e01c      	b.n	800391e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	431a      	orrs	r2, r3
 8003908:	4914      	ldr	r1, [pc, #80]	@ (800395c <HAL_OSPIM_Config+0x9e0>)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	3b01      	subs	r3, #1
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800391e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <HAL_OSPIM_Config+0x9e4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <HAL_OSPIM_Config+0x9e4>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003936:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <HAL_OSPIM_Config+0x9e8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a07      	ldr	r2, [pc, #28]	@ (8003964 <HAL_OSPIM_Config+0x9e8>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800394e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003952:	4618      	mov	r0, r3
 8003954:	3750      	adds	r7, #80	@ 0x50
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	420c4000 	.word	0x420c4000
 8003960:	420d1400 	.word	0x420d1400
 8003964:	420d2400 	.word	0x420d2400

08003968 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003978:	e022      	b.n	80039c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d01e      	beq.n	80039c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe fa8f 	bl	8001ea4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d113      	bne.n	80039c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a1a      	ldr	r2, [r3, #32]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	401a      	ands	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d00b      	beq.n	80039c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e00e      	b.n	80039de <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1ce      	bne.n	800397a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <OSPIM_GetConfig+0x26>
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d802      	bhi.n	8003a0e <OSPIM_GetConfig+0x26>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
 8003a12:	e098      	b.n	8003b46 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d10b      	bne.n	8003a50 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003a38:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <OSPIM_GetConfig+0x16c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003a44:	4b44      	ldr	r3, [pc, #272]	@ (8003b58 <OSPIM_GetConfig+0x170>)
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e002      	b.n	8003a50 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a4e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e074      	b.n	8003b40 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003a56:	4a3f      	ldr	r2, [pc, #252]	@ (8003b54 <OSPIM_GetConfig+0x16c>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4053      	eors	r3, r2
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4053      	eors	r3, r2
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4053      	eors	r3, r2
 8003ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d018      	beq.n	8003afe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4053      	eors	r3, r2
 8003ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d111      	bne.n	8003afe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e005      	b.n	8003afe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3301      	adds	r3, #1
 8003af6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d018      	beq.n	8003b3a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4053      	eors	r3, r2
 8003b0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d111      	bne.n	8003b3a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
 8003b2c:	e005      	b.n	8003b3a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d987      	bls.n	8003a56 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	420c4000 	.word	0x420c4000
 8003b58:	04040222 	.word	0x04040222

08003b5c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0202 	orr.w	r2, r2, #2
 8003b78:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d109      	bne.n	8003b9e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003b8a:	4815      	ldr	r0, [pc, #84]	@ (8003be0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003b8c:	f7ff f8a6 	bl	8002cdc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	4813      	ldr	r0, [pc, #76]	@ (8003be0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003b94:	f005 f874 	bl	8008c80 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e00d      	b.n	8003bba <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003ba8:	480f      	ldr	r0, [pc, #60]	@ (8003be8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003baa:	f7ff f897 	bl	8002cdc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003bae:	6839      	ldr	r1, [r7, #0]
 8003bb0:	480d      	ldr	r0, [pc, #52]	@ (8003be8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003bb2:	f005 f865 	bl	8008c80 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff f95a 	bl	8002e74 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0202 	bic.w	r2, r2, #2
 8003bce:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	420d1400 	.word	0x420d1400
 8003be0:	420cf000 	.word	0x420cf000
 8003be4:	420d2400 	.word	0x420d2400
 8003be8:	420cf400 	.word	0x420cf400

08003bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e108      	b.n	8003e10 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd ff6b 	bl	8001af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a7b      	ldr	r2, [pc, #492]	@ (8003e18 <HAL_PCD_Init+0x22c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d102      	bne.n	8003c34 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f005 fa36 	bl	80090aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7c1a      	ldrb	r2, [r3, #16]
 8003c46:	f88d 2000 	strb.w	r2, [sp]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4e:	f005 f9ff 	bl	8009050 <USB_CoreInit>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0d5      	b.n	8003e10 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 fa2e 	bl	80090cc <USB_SetCurrentMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0c6      	b.n	8003e10 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e04a      	b.n	8003d1e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3315      	adds	r3, #21
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3314      	adds	r3, #20
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	332e      	adds	r3, #46	@ 0x2e
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	331c      	adds	r3, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3320      	adds	r3, #32
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3324      	adds	r3, #36	@ 0x24
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3af      	bcc.n	8003c88 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e044      	b.n	8003db8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b5      	bcc.n	8003d2e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7c1a      	ldrb	r2, [r3, #16]
 8003dca:	f88d 2000 	strb.w	r2, [sp]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd2:	f005 f9c7 	bl	8009164 <USB_DevInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e013      	b.n	8003e10 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7b1b      	ldrb	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f80c 	bl	8003e1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f005 fb70 	bl	80094ee <USB_DevDisconnect>

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	42040000 	.word	0x42040000

08003e1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	f043 0303 	orr.w	r3, r3, #3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003e6c:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e74:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10b      	bne.n	8003e96 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e84:	d905      	bls.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e86:	4b33      	ldr	r3, [pc, #204]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e057      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d90a      	bls.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb0:	60d3      	str	r3, [r2, #12]
 8003eb2:	e007      	b.n	8003ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003eb4:	4b27      	ldr	r3, [pc, #156]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ebc:	4925      	ldr	r1, [pc, #148]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ec4:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	2232      	movs	r2, #50	@ 0x32
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003ee2:	e002      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003eea:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x98>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f3      	bne.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01b      	beq.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	2232      	movs	r2, #50	@ 0x32
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	4a11      	ldr	r2, [pc, #68]	@ (8003f5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f20:	e002      	b.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f28:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f3      	bne.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e000      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	46020800 	.word	0x46020800
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	10624dd3 	.word	0x10624dd3

08003f60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	46020800 	.word	0x46020800

08003f7c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f84:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_PWREx_ConfigSupply+0x94>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <HAL_PWREx_ConfigSupply+0x98>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2232      	movs	r2, #50	@ 0x32
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a1f      	ldr	r2, [pc, #124]	@ (8004014 <HAL_PWREx_ConfigSupply+0x98>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d113      	bne.n	8003fd0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a1a      	ldr	r2, [pc, #104]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fae:	f023 0302 	bic.w	r3, r3, #2
 8003fb2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fb4:	e002      	b.n	8003fbc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fbc:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d116      	bne.n	8003ff6 <HAL_PWREx_ConfigSupply+0x7a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f3      	bne.n	8003fb6 <HAL_PWREx_ConfigSupply+0x3a>
 8003fce:	e012      	b.n	8003ff6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fd0:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a10      	ldr	r2, [pc, #64]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fdc:	e002      	b.n	8003fe4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_PWREx_ConfigSupply+0x7a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f3      	bne.n	8003fde <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e000      	b.n	8004002 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000000 	.word	0x20000000
 8004014:	10624dd3 	.word	0x10624dd3
 8004018:	46020800 	.word	0x46020800

0800401c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a04      	ldr	r2, [pc, #16]	@ (8004038 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402a:	6113      	str	r3, [r2, #16]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	46020800 	.word	0x46020800

0800403c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004046:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800404a:	6113      	str	r3, [r2, #16]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	46020800 	.word	0x46020800

0800405c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	@ 0x38
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f000 bec8 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004076:	4b99      	ldr	r3, [pc, #612]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004080:	4b96      	ldr	r3, [pc, #600]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 816c 	beq.w	8004370 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_RCC_OscConfig+0x52>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	f040 80de 	bne.w	8004262 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 80da 	bne.w	8004262 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f000 bea5 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040c0:	4b86      	ldr	r3, [pc, #536]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <HAL_RCC_OscConfig+0x7a>
 80040cc:	4b83      	ldr	r3, [pc, #524]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040d4:	e005      	b.n	80040e2 <HAL_RCC_OscConfig+0x86>
 80040d6:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80040d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d255      	bcs.n	8004192 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f9d9 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f000 be82 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004102:	4b76      	ldr	r3, [pc, #472]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4a75      	ldr	r2, [pc, #468]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004108:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800410c:	6093      	str	r3, [r2, #8]
 800410e:	4b73      	ldr	r3, [pc, #460]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	4970      	ldr	r1, [pc, #448]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004128:	d309      	bcc.n	800413e <HAL_RCC_OscConfig+0xe2>
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 021f 	bic.w	r2, r3, #31
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4969      	ldr	r1, [pc, #420]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004138:	4313      	orrs	r3, r2
 800413a:	60cb      	str	r3, [r1, #12]
 800413c:	e07e      	b.n	800423c <HAL_RCC_OscConfig+0x1e0>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0a      	bge.n	800415c <HAL_RCC_OscConfig+0x100>
 8004146:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	4961      	ldr	r1, [pc, #388]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004156:	4313      	orrs	r3, r2
 8004158:	60cb      	str	r3, [r1, #12]
 800415a:	e06f      	b.n	800423c <HAL_RCC_OscConfig+0x1e0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004164:	d30a      	bcc.n	800417c <HAL_RCC_OscConfig+0x120>
 8004166:	4b5d      	ldr	r3, [pc, #372]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	4959      	ldr	r1, [pc, #356]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
 800417a:	e05f      	b.n	800423c <HAL_RCC_OscConfig+0x1e0>
 800417c:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	03db      	lsls	r3, r3, #15
 800418a:	4954      	ldr	r1, [pc, #336]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800418c:	4313      	orrs	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]
 8004190:	e054      	b.n	800423c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004192:	4b52      	ldr	r3, [pc, #328]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a51      	ldr	r2, [pc, #324]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800419c:	6093      	str	r3, [r2, #8]
 800419e:	4b4f      	ldr	r3, [pc, #316]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	494c      	ldr	r1, [pc, #304]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041b8:	d309      	bcc.n	80041ce <HAL_RCC_OscConfig+0x172>
 80041ba:	4b48      	ldr	r3, [pc, #288]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 021f 	bic.w	r2, r3, #31
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4945      	ldr	r1, [pc, #276]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e028      	b.n	8004220 <HAL_RCC_OscConfig+0x1c4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da0a      	bge.n	80041ec <HAL_RCC_OscConfig+0x190>
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	015b      	lsls	r3, r3, #5
 80041e4:	493d      	ldr	r1, [pc, #244]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
 80041ea:	e019      	b.n	8004220 <HAL_RCC_OscConfig+0x1c4>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d30a      	bcc.n	800420c <HAL_RCC_OscConfig+0x1b0>
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	4935      	ldr	r1, [pc, #212]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
 800420a:	e009      	b.n	8004220 <HAL_RCC_OscConfig+0x1c4>
 800420c:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	03db      	lsls	r3, r3, #15
 800421a:	4930      	ldr	r1, [pc, #192]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f93c 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f000 bde5 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800423c:	f001 f8de 	bl	80053fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <HAL_RCC_OscConfig+0x284>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fda3 	bl	8001d90 <HAL_InitTick>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 808a 	beq.w	800436e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800425a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800425e:	f000 bdd2 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d066      	beq.n	8004338 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800426a:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004276:	f7fd fe15 	bl	8001ea4 <HAL_GetTick>
 800427a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800427c:	e009      	b.n	8004292 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800427e:	f7fd fe11 	bl	8001ea4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d902      	bls.n	8004292 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	f000 bdba 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ef      	beq.n	800427e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800429e:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4a0e      	ldr	r2, [pc, #56]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a8:	6093      	str	r3, [r2, #8]
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	4909      	ldr	r1, [pc, #36]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80042c4:	d30e      	bcc.n	80042e4 <HAL_RCC_OscConfig+0x288>
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f023 021f 	bic.w	r2, r3, #31
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4902      	ldr	r1, [pc, #8]	@ (80042dc <HAL_RCC_OscConfig+0x280>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60cb      	str	r3, [r1, #12]
 80042d8:	e04a      	b.n	8004370 <HAL_RCC_OscConfig+0x314>
 80042da:	bf00      	nop
 80042dc:	46020c00 	.word	0x46020c00
 80042e0:	20000004 	.word	0x20000004
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da0a      	bge.n	8004302 <HAL_RCC_OscConfig+0x2a6>
 80042ec:	4b98      	ldr	r3, [pc, #608]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	015b      	lsls	r3, r3, #5
 80042fa:	4995      	ldr	r1, [pc, #596]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60cb      	str	r3, [r1, #12]
 8004300:	e036      	b.n	8004370 <HAL_RCC_OscConfig+0x314>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d30a      	bcc.n	8004322 <HAL_RCC_OscConfig+0x2c6>
 800430c:	4b90      	ldr	r3, [pc, #576]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	029b      	lsls	r3, r3, #10
 800431a:	498d      	ldr	r1, [pc, #564]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
 8004320:	e026      	b.n	8004370 <HAL_RCC_OscConfig+0x314>
 8004322:	4b8b      	ldr	r3, [pc, #556]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	03db      	lsls	r3, r3, #15
 8004330:	4987      	ldr	r1, [pc, #540]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	60cb      	str	r3, [r1, #12]
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004338:	4b85      	ldr	r3, [pc, #532]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a84      	ldr	r2, [pc, #528]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004344:	f7fd fdae 	bl	8001ea4 <HAL_GetTick>
 8004348:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800434a:	e009      	b.n	8004360 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434c:	f7fd fdaa 	bl	8001ea4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d902      	bls.n	8004360 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	f000 bd53 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004360:	4b7b      	ldr	r3, [pc, #492]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ef      	bne.n	800434c <HAL_RCC_OscConfig+0x2f0>
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800436e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 808b 	beq.w	8004494 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	2b08      	cmp	r3, #8
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x334>
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d109      	bne.n	800439e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800438a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438c:	2b03      	cmp	r3, #3
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d17d      	bne.n	8004494 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f000 bd34 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x35a>
 80043a8:	4b69      	ldr	r3, [pc, #420]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e041      	b.n	800443a <HAL_RCC_OscConfig+0x3de>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043be:	d112      	bne.n	80043e6 <HAL_RCC_OscConfig+0x38a>
 80043c0:	4b63      	ldr	r3, [pc, #396]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a62      	ldr	r2, [pc, #392]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b60      	ldr	r3, [pc, #384]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e029      	b.n	800443a <HAL_RCC_OscConfig+0x3de>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80043ee:	d112      	bne.n	8004416 <HAL_RCC_OscConfig+0x3ba>
 80043f0:	4b57      	ldr	r3, [pc, #348]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a56      	ldr	r2, [pc, #344]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b54      	ldr	r3, [pc, #336]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a53      	ldr	r2, [pc, #332]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b51      	ldr	r3, [pc, #324]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a50      	ldr	r2, [pc, #320]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e011      	b.n	800443a <HAL_RCC_OscConfig+0x3de>
 8004416:	4b4e      	ldr	r3, [pc, #312]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4d      	ldr	r2, [pc, #308]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b4b      	ldr	r3, [pc, #300]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4a      	ldr	r2, [pc, #296]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b48      	ldr	r3, [pc, #288]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a47      	ldr	r2, [pc, #284]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004442:	f7fd fd2f 	bl	8001ea4 <HAL_GetTick>
 8004446:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004448:	e009      	b.n	800445e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444a:	f7fd fd2b 	bl	8001ea4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b64      	cmp	r3, #100	@ 0x64
 8004456:	d902      	bls.n	800445e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	f000 bcd4 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ef      	beq.n	800444a <HAL_RCC_OscConfig+0x3ee>
 800446a:	e013      	b.n	8004494 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800446c:	f7fd fd1a 	bl	8001ea4 <HAL_GetTick>
 8004470:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004472:	e009      	b.n	8004488 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fd fd16 	bl	8001ea4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	@ 0x64
 8004480:	d902      	bls.n	8004488 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	f000 bcbf 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004488:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ef      	bne.n	8004474 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d05f      	beq.n	8004560 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x456>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d114      	bne.n	80044d6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d111      	bne.n	80044d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f000 bca3 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b23      	ldr	r3, [pc, #140]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	4920      	ldr	r1, [pc, #128]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044d4:	e044      	b.n	8004560 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d024      	beq.n	8004528 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80044de:	4b1c      	ldr	r3, [pc, #112]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044ea:	f7fd fcdb 	bl	8001ea4 <HAL_GetTick>
 80044ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd fcd7 	bl	8001ea4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d902      	bls.n	8004506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	f000 bc80 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	490b      	ldr	r1, [pc, #44]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004532:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004534:	f7fd fcb6 	bl	8001ea4 <HAL_GetTick>
 8004538:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fd fcb2 	bl	8001ea4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d904      	bls.n	8004554 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f000 bc5b 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
 8004550:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004554:	4baf      	ldr	r3, [pc, #700]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ed      	bne.n	800453c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80c8 	beq.w	80046fe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004574:	4ba7      	ldr	r3, [pc, #668]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d111      	bne.n	80045a6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	4ba4      	ldr	r3, [pc, #656]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	4aa2      	ldr	r2, [pc, #648]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004592:	4ba0      	ldr	r3, [pc, #640]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d119      	bne.n	80045e6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80045b2:	4b99      	ldr	r3, [pc, #612]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	4a98      	ldr	r2, [pc, #608]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fd fc71 	bl	8001ea4 <HAL_GetTick>
 80045c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045c4:	e009      	b.n	80045da <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fd fc6d 	bl	8001ea4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d902      	bls.n	80045da <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	f000 bc16 	b.w	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045da:	4b8f      	ldr	r3, [pc, #572]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05f      	beq.n	80046ae <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80045ee:	4b89      	ldr	r3, [pc, #548]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80045f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	429a      	cmp	r2, r3
 8004602:	d037      	beq.n	8004674 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e3f4      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01b      	beq.n	800465e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004626:	4b7b      	ldr	r3, [pc, #492]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462c:	4a79      	ldr	r2, [pc, #484]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 800462e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004636:	f7fd fc35 	bl	8001ea4 <HAL_GetTick>
 800463a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fd fc31 	bl	8001ea4 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b05      	cmp	r3, #5
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e3da      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004650:	4b70      	ldr	r3, [pc, #448]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ef      	bne.n	800463e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800465e:	4b6d      	ldr	r3, [pc, #436]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004664:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4969      	ldr	r1, [pc, #420]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004674:	4b67      	ldr	r3, [pc, #412]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800467a:	4a66      	ldr	r2, [pc, #408]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 800467c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004680:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004684:	f7fd fc0e 	bl	8001ea4 <HAL_GetTick>
 8004688:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fd fc0a 	bl	8001ea4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b05      	cmp	r3, #5
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e3b3      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800469e:	4b5d      	ldr	r3, [pc, #372]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <HAL_RCC_OscConfig+0x630>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b59      	ldr	r3, [pc, #356]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b4:	4a57      	ldr	r2, [pc, #348]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046b6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80046be:	f7fd fbf1 	bl	8001ea4 <HAL_GetTick>
 80046c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fd fbed 	bl	8001ea4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e396      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b49      	ldr	r3, [pc, #292]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f4:	4a47      	ldr	r2, [pc, #284]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80046f6:	f023 0304 	bic.w	r3, r3, #4
 80046fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8111 	beq.w	800492e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b40      	ldr	r3, [pc, #256]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b3c      	ldr	r3, [pc, #240]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004726:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004730:	4b38      	ldr	r3, [pc, #224]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004744:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d118      	bne.n	8004782 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004750:	4b31      	ldr	r3, [pc, #196]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475c:	f7fd fba2 	bl	8001ea4 <HAL_GetTick>
 8004760:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004764:	f7fd fb9e 	bl	8001ea4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e347      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004776:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <HAL_RCC_OscConfig+0x7bc>)
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01f      	beq.n	80047ce <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800479a:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 800479c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047b0:	4a18      	ldr	r2, [pc, #96]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047ba:	e018      	b.n	80047ee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047bc:	4b15      	ldr	r3, [pc, #84]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047c2:	4a14      	ldr	r2, [pc, #80]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047cc:	e00f      	b.n	80047ee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047ce:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004814 <HAL_RCC_OscConfig+0x7b8>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d057      	beq.n	80048a6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80047f6:	f7fd fb55 	bl	8001ea4 <HAL_GetTick>
 80047fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fc:	e00e      	b.n	800481c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd fb51 	bl	8001ea4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d905      	bls.n	800481c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e2f8      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
 8004814:	46020c00 	.word	0x46020c00
 8004818:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481c:	4b9c      	ldr	r3, [pc, #624]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800481e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0e9      	beq.n	80047fe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004836:	4b96      	ldr	r3, [pc, #600]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800483c:	4a94      	ldr	r2, [pc, #592]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004842:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd fb2c 	bl	8001ea4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e2d3      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800485e:	4b8c      	ldr	r3, [pc, #560]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ed      	beq.n	8004848 <HAL_RCC_OscConfig+0x7ec>
 800486c:	e053      	b.n	8004916 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800486e:	4b88      	ldr	r3, [pc, #544]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004874:	4a86      	ldr	r2, [pc, #536]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800487a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd fb10 	bl	8001ea4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e2b7      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004896:	4b7e      	ldr	r3, [pc, #504]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ed      	bne.n	8004880 <HAL_RCC_OscConfig+0x824>
 80048a4:	e037      	b.n	8004916 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80048a6:	f7fd fafd 	bl	8001ea4 <HAL_GetTick>
 80048aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd faf9 	bl	8001ea4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e2a0      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c4:	4b72      	ldr	r3, [pc, #456]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80048c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ed      	bne.n	80048ae <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80048d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80048d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80048e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80048e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fd fad7 	bl	8001ea4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e27e      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004908:	4b61      	ldr	r3, [pc, #388]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800490a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800490e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1ed      	bne.n	80048f2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004916:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800491e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004924:	4a5a      	ldr	r2, [pc, #360]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004926:	f023 0304 	bic.w	r3, r3, #4
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d036      	beq.n	80049a8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d019      	beq.n	8004976 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004942:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a52      	ldr	r2, [pc, #328]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004948:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800494c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800494e:	f7fd faa9 	bl	8001ea4 <HAL_GetTick>
 8004952:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004956:	f7fd faa5 	bl	8001ea4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e24e      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004968:	4b49      	ldr	r3, [pc, #292]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x8fa>
 8004974:	e018      	b.n	80049a8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004976:	4b46      	ldr	r3, [pc, #280]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a45      	ldr	r2, [pc, #276]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800497c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004980:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004982:	f7fd fa8f 	bl	8001ea4 <HAL_GetTick>
 8004986:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800498a:	f7fd fa8b 	bl	8001ea4 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e234      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800499c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d036      	beq.n	8004a22 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80049bc:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80049c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049c8:	f7fd fa6c 	bl	8001ea4 <HAL_GetTick>
 80049cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80049d0:	f7fd fa68 	bl	8001ea4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e211      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80049e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x974>
 80049ee:	e018      	b.n	8004a22 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80049f0:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a26      	ldr	r2, [pc, #152]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 80049f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049fc:	f7fd fa52 	bl	8001ea4 <HAL_GetTick>
 8004a00:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a04:	f7fd fa4e 	bl	8001ea4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1f7      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a16:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d07f      	beq.n	8004b2e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d062      	beq.n	8004afc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004a36:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a40:	6093      	str	r3, [r2, #8]
 8004a42:	4b13      	ldr	r3, [pc, #76]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	4910      	ldr	r1, [pc, #64]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a5c:	d309      	bcc.n	8004a72 <HAL_RCC_OscConfig+0xa16>
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 021f 	bic.w	r2, r3, #31
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4909      	ldr	r1, [pc, #36]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60cb      	str	r3, [r1, #12]
 8004a70:	e02a      	b.n	8004ac8 <HAL_RCC_OscConfig+0xa6c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da0c      	bge.n	8004a94 <HAL_RCC_OscConfig+0xa38>
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	015b      	lsls	r3, r3, #5
 8004a88:	4901      	ldr	r1, [pc, #4]	@ (8004a90 <HAL_RCC_OscConfig+0xa34>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
 8004a8e:	e01b      	b.n	8004ac8 <HAL_RCC_OscConfig+0xa6c>
 8004a90:	46020c00 	.word	0x46020c00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d30a      	bcc.n	8004ab4 <HAL_RCC_OscConfig+0xa58>
 8004a9e:	4ba1      	ldr	r3, [pc, #644]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	029b      	lsls	r3, r3, #10
 8004aac:	499d      	ldr	r1, [pc, #628]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60cb      	str	r3, [r1, #12]
 8004ab2:	e009      	b.n	8004ac8 <HAL_RCC_OscConfig+0xa6c>
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	03db      	lsls	r3, r3, #15
 8004ac2:	4998      	ldr	r1, [pc, #608]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004ac8:	4b96      	ldr	r3, [pc, #600]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a95      	ldr	r2, [pc, #596]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ace:	f043 0310 	orr.w	r3, r3, #16
 8004ad2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ad4:	f7fd f9e6 	bl	8001ea4 <HAL_GetTick>
 8004ad8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004adc:	f7fd f9e2 	bl	8001ea4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e18b      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004aee:	4b8d      	ldr	r3, [pc, #564]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xa80>
 8004afa:	e018      	b.n	8004b2e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004afc:	4b89      	ldr	r3, [pc, #548]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a88      	ldr	r2, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b08:	f7fd f9cc 	bl	8001ea4 <HAL_GetTick>
 8004b0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b10:	f7fd f9c8 	bl	8001ea4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e171      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b22:	4b80      	ldr	r3, [pc, #512]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8166 	beq.w	8004e04 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b3e:	4b79      	ldr	r3, [pc, #484]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	f000 80f2 	beq.w	8004d30 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f040 80c5 	bne.w	8004ce0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b73      	ldr	r3, [pc, #460]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a72      	ldr	r2, [pc, #456]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b62:	f7fd f99f 	bl	8001ea4 <HAL_GetTick>
 8004b66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fd f99b 	bl	8001ea4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e144      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b7c:	4b69      	ldr	r3, [pc, #420]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b88:	4b66      	ldr	r3, [pc, #408]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d111      	bne.n	8004bba <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	4b63      	ldr	r3, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9c:	4a61      	ldr	r2, [pc, #388]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004bba:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <HAL_RCC_OscConfig+0xccc>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bc6:	d102      	bne.n	8004bce <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004bce:	4b56      	ldr	r3, [pc, #344]	@ (8004d28 <HAL_RCC_OscConfig+0xccc>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a55      	ldr	r2, [pc, #340]	@ (8004d28 <HAL_RCC_OscConfig+0xccc>)
 8004bd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bd8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004bda:	4b52      	ldr	r3, [pc, #328]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0212      	lsls	r2, r2, #8
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	494a      	ldr	r1, [pc, #296]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c00:	4b48      	ldr	r3, [pc, #288]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c04:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <HAL_RCC_OscConfig+0xcd0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c16:	3a01      	subs	r2, #1
 8004c18:	0252      	lsls	r2, r2, #9
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c22:	3a01      	subs	r2, #1
 8004c24:	0412      	lsls	r2, r2, #16
 8004c26:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0612      	lsls	r2, r2, #24
 8004c34:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	493a      	ldr	r1, [pc, #232]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004c40:	4b38      	ldr	r3, [pc, #224]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	4a37      	ldr	r2, [pc, #220]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c46:	f023 0310 	bic.w	r3, r3, #16
 8004c4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	4a34      	ldr	r2, [pc, #208]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004c56:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	4a32      	ldr	r2, [pc, #200]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c5c:	f043 0310 	orr.w	r3, r3, #16
 8004c60:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004c62:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	f023 020c 	bic.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6e:	492d      	ldr	r1, [pc, #180]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004c74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d28 <HAL_RCC_OscConfig+0xccc>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a29      	ldr	r2, [pc, #164]	@ (8004d28 <HAL_RCC_OscConfig+0xccc>)
 8004c82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c86:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004c88:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c96:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cac:	f7fd f8fa 	bl	8001ea4 <HAL_GetTick>
 8004cb0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd f8f6 	bl	8001ea4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e09f      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cc6:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cdc:	6293      	str	r3, [r2, #40]	@ 0x28
 8004cde:	e091      	b.n	8004e04 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cec:	f7fd f8da 	bl	8001ea4 <HAL_GetTick>
 8004cf0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fd f8d6 	bl	8001ea4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e07f      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d06:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d12:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	4a03      	ldr	r2, [pc, #12]	@ (8004d24 <HAL_RCC_OscConfig+0xcc8>)
 8004d18:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d22:	e06f      	b.n	8004e04 <HAL_RCC_OscConfig+0xda8>
 8004d24:	46020c00 	.word	0x46020c00
 8004d28:	46020800 	.word	0x46020800
 8004d2c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d30:	4b37      	ldr	r3, [pc, #220]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d36:	4b36      	ldr	r3, [pc, #216]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d039      	beq.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0203 	and.w	r2, r3, #3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d132      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d129      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d122      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d11a      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	0a5b      	lsrs	r3, r3, #9
 8004d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d111      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d108      	bne.n	8004db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	0e1b      	lsrs	r3, r3, #24
 8004daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e024      	b.n	8004e06 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d01a      	beq.n	8004e04 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fd f863 	bl	8001ea4 <HAL_GetTick>
 8004dde:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004de0:	bf00      	nop
 8004de2:	f7fd f85f 	bl	8001ea4 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d0f9      	beq.n	8004de2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	4a07      	ldr	r2, [pc, #28]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	4a04      	ldr	r2, [pc, #16]	@ (8004e10 <HAL_RCC_OscConfig+0xdb4>)
 8004dfe:	f043 0310 	orr.w	r3, r3, #16
 8004e02:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3738      	adds	r7, #56	@ 0x38
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	46020c00 	.word	0x46020c00

08004e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e1d9      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e28:	4b9b      	ldr	r3, [pc, #620]	@ (8005098 <HAL_RCC_ClockConfig+0x284>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d910      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b98      	ldr	r3, [pc, #608]	@ (8005098 <HAL_RCC_ClockConfig+0x284>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 020f 	bic.w	r2, r3, #15
 8004e3e:	4996      	ldr	r1, [pc, #600]	@ (8005098 <HAL_RCC_ClockConfig+0x284>)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b94      	ldr	r3, [pc, #592]	@ (8005098 <HAL_RCC_ClockConfig+0x284>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e1c1      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	4b8c      	ldr	r3, [pc, #560]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d908      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004e74:	4b89      	ldr	r3, [pc, #548]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	4986      	ldr	r1, [pc, #536]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	4b81      	ldr	r3, [pc, #516]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d909      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004ea4:	4b7d      	ldr	r3, [pc, #500]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	497a      	ldr	r1, [pc, #488]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	4b74      	ldr	r3, [pc, #464]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004ed4:	4b71      	ldr	r3, [pc, #452]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	496e      	ldr	r1, [pc, #440]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b69      	ldr	r3, [pc, #420]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d908      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f02:	4b66      	ldr	r3, [pc, #408]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4963      	ldr	r1, [pc, #396]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80d2 	beq.w	80050c6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d143      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f3c:	4b57      	ldr	r3, [pc, #348]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f42:	4a56      	ldr	r2, [pc, #344]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f4c:	4b53      	ldr	r3, [pc, #332]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004f5e:	f7fc ffa1 	bl	8001ea4 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004f64:	4b4e      	ldr	r3, [pc, #312]	@ (80050a0 <HAL_RCC_ClockConfig+0x28c>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004f72:	f7fc ff97 	bl	8001ea4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e12b      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004f84:	4b46      	ldr	r3, [pc, #280]	@ (80050a0 <HAL_RCC_ClockConfig+0x28c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4b41      	ldr	r3, [pc, #260]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004f9e:	f023 0304 	bic.w	r3, r3, #4
 8004fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e112      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fbe:	4b37      	ldr	r3, [pc, #220]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d115      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e106      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004fd6:	4b31      	ldr	r3, [pc, #196]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0fa      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0f2      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004ff6:	4b29      	ldr	r3, [pc, #164]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4926      	ldr	r1, [pc, #152]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005008:	f7fc ff4c 	bl	8001ea4 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d112      	bne.n	800503c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fc ff44 	bl	8001ea4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e0d6      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800502e:	4b1b      	ldr	r3, [pc, #108]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d1ee      	bne.n	8005018 <HAL_RCC_ClockConfig+0x204>
 800503a:	e044      	b.n	80050c6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d112      	bne.n	800506a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005044:	e00a      	b.n	800505c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005046:	f7fc ff2d 	bl	8001ea4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0bf      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d1ee      	bne.n	8005046 <HAL_RCC_ClockConfig+0x232>
 8005068:	e02d      	b.n	80050c6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d123      	bne.n	80050ba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fc ff16 	bl	8001ea4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0a8      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800508a:	4b04      	ldr	r3, [pc, #16]	@ (800509c <HAL_RCC_ClockConfig+0x288>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ee      	bne.n	8005074 <HAL_RCC_ClockConfig+0x260>
 8005096:	e016      	b.n	80050c6 <HAL_RCC_ClockConfig+0x2b2>
 8005098:	40022000 	.word	0x40022000
 800509c:	46020c00 	.word	0x46020c00
 80050a0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fc fefe 	bl	8001ea4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e090      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ba:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d1ee      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d010      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	4b43      	ldr	r3, [pc, #268]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	429a      	cmp	r2, r3
 80050e0:	d208      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80050e2:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 020f 	bic.w	r2, r3, #15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	493d      	ldr	r1, [pc, #244]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b3c      	ldr	r3, [pc, #240]	@ (80051e8 <HAL_RCC_ClockConfig+0x3d4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d210      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b39      	ldr	r3, [pc, #228]	@ (80051e8 <HAL_RCC_ClockConfig+0x3d4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 020f 	bic.w	r2, r3, #15
 800510a:	4937      	ldr	r1, [pc, #220]	@ (80051e8 <HAL_RCC_ClockConfig+0x3d4>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b35      	ldr	r3, [pc, #212]	@ (80051e8 <HAL_RCC_ClockConfig+0x3d4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e05b      	b.n	80051dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800513c:	429a      	cmp	r2, r3
 800513e:	d208      	bcs.n	8005152 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4925      	ldr	r1, [pc, #148]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	4b20      	ldr	r3, [pc, #128]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800516c:	429a      	cmp	r2, r3
 800516e:	d209      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005170:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	4919      	ldr	r1, [pc, #100]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	4b13      	ldr	r3, [pc, #76]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800519c:	429a      	cmp	r2, r3
 800519e:	d208      	bcs.n	80051b2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80051a0:	4b10      	ldr	r3, [pc, #64]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	490d      	ldr	r1, [pc, #52]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80051b2:	f000 f821 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <HAL_RCC_ClockConfig+0x3d0>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	490a      	ldr	r1, [pc, #40]	@ (80051ec <HAL_RCC_ClockConfig+0x3d8>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x3dc>)
 80051ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCC_ClockConfig+0x3e0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fc fddd 	bl	8001d90 <HAL_InitTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	46020c00 	.word	0x46020c00
 80051e8:	40022000 	.word	0x40022000
 80051ec:	08009620 	.word	0x08009620
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004

080051f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b08b      	sub	sp, #44	@ 0x2c
 80051fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005206:	4b78      	ldr	r3, [pc, #480]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005210:	4b75      	ldr	r3, [pc, #468]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x34>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d121      	bne.n	800526a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11e      	bne.n	800526a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800522c:	4b6e      	ldr	r3, [pc, #440]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d107      	bne.n	8005248 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005238:	4b6b      	ldr	r3, [pc, #428]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800523a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800523e:	0b1b      	lsrs	r3, r3, #12
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
 8005246:	e005      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005248:	4b67      	ldr	r3, [pc, #412]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	0f1b      	lsrs	r3, r3, #28
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005254:	4a65      	ldr	r2, [pc, #404]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d110      	bne.n	8005286 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005268:	e00d      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800526a:	4b5f      	ldr	r3, [pc, #380]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b04      	cmp	r3, #4
 8005274:	d102      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005276:	4b5e      	ldr	r3, [pc, #376]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	e004      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d101      	bne.n	8005286 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005282:	4b5b      	ldr	r3, [pc, #364]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005284:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	f040 80a5 	bne.w	80053d8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800528e:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005298:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80052a6:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80052b2:	4b4d      	ldr	r3, [pc, #308]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	08db      	lsrs	r3, r3, #3
 80052b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d003      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0xe4>
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d022      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x128>
 80052da:	e043      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80053f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ee:	4b3e      	ldr	r3, [pc, #248]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8005302:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x200>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800530e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531e:	e046      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80053f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005342:	ed97 6a01 	vldr	s12, [r7, #4]
 8005346:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x200>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005362:	e024      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537c:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800537e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800538c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005390:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80053f8 <HAL_RCC_GetSysClockFreq+0x200>
 8005394:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005398:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800539c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ac:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80053ae:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b2:	0e1b      	lsrs	r3, r3, #24
 80053b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b8:	3301      	adds	r3, #1
 80053ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d2:	ee17 3a90 	vmov	r3, s15
 80053d6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	372c      	adds	r7, #44	@ 0x2c
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	46020c00 	.word	0x46020c00
 80053ec:	08009638 	.word	0x08009638
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	4b742400 	.word	0x4b742400
 80053f8:	46000000 	.word	0x46000000

080053fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005400:	f7ff fefa 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <HAL_RCC_GetHCLKFreq+0x28>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	4906      	ldr	r1, [pc, #24]	@ (8005428 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005410:	5ccb      	ldrb	r3, [r1, r3]
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	4a05      	ldr	r2, [pc, #20]	@ (800542c <HAL_RCC_GetHCLKFreq+0x30>)
 8005418:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800541a:	4b04      	ldr	r3, [pc, #16]	@ (800542c <HAL_RCC_GetHCLKFreq+0x30>)
 800541c:	681b      	ldr	r3, [r3, #0]
}
 800541e:	4618      	mov	r0, r3
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	46020c00 	.word	0x46020c00
 8005428:	08009620 	.word	0x08009620
 800542c:	20000000 	.word	0x20000000

08005430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005434:	f7ff ffe2 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8005438:	4602      	mov	r2, r0
 800543a:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	091b      	lsrs	r3, r3, #4
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	4903      	ldr	r1, [pc, #12]	@ (8005454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005446:	5ccb      	ldrb	r3, [r1, r3]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	46020c00 	.word	0x46020c00
 8005454:	08009630 	.word	0x08009630

08005458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800545c:	f7ff ffce 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4903      	ldr	r1, [pc, #12]	@ (800547c <HAL_RCC_GetPCLK2Freq+0x24>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	46020c00 	.word	0x46020c00
 800547c:	08009630 	.word	0x08009630

08005480 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005484:	f7ff ffba 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	46020c00 	.word	0x46020c00
 80054a4:	08009630 	.word	0x08009630

080054a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054b0:	4b3e      	ldr	r3, [pc, #248]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054be:	f7fe fd4f 	bl	8003f60 <HAL_PWREx_GetVoltageRange>
 80054c2:	6178      	str	r0, [r7, #20]
 80054c4:	e019      	b.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054cc:	4a37      	ldr	r2, [pc, #220]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054d6:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e4:	f7fe fd3c 	bl	8003f60 <HAL_PWREx_GetVoltageRange>
 80054e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ea:	4b30      	ldr	r3, [pc, #192]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f0:	4a2e      	ldr	r2, [pc, #184]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054f2:	f023 0304 	bic.w	r3, r3, #4
 80054f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005500:	d003      	beq.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005508:	d109      	bne.n	800551e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005510:	d202      	bcs.n	8005518 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005512:	2301      	movs	r3, #1
 8005514:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005516:	e033      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800551c:	e030      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005524:	d208      	bcs.n	8005538 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d102      	bne.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800552e:	2303      	movs	r3, #3
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e025      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e035      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800553e:	d90f      	bls.n	8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800554c:	d902      	bls.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e015      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005554:	2301      	movs	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e012      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	e00f      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005566:	d109      	bne.n	800557c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556e:	d102      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005570:	2301      	movs	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e004      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005576:	2302      	movs	r3, #2
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e001      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 020f 	bic.w	r2, r3, #15
 8005588:	4909      	ldr	r1, [pc, #36]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	46020c00 	.word	0x46020c00
 80055b0:	40022000 	.word	0x40022000

080055b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80055b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b8:	b0ba      	sub	sp, #232	@ 0xe8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 0401 	and.w	r4, r2, #1
 80055d8:	2500      	movs	r5, #0
 80055da:	ea54 0305 	orrs.w	r3, r4, r5
 80055de:	d00b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80055e0:	4bcb      	ldr	r3, [pc, #812]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e6:	f023 0103 	bic.w	r1, r3, #3
 80055ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	4ac7      	ldr	r2, [pc, #796]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f2:	430b      	orrs	r3, r1
 80055f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f002 0802 	and.w	r8, r2, #2
 8005604:	f04f 0900 	mov.w	r9, #0
 8005608:	ea58 0309 	orrs.w	r3, r8, r9
 800560c:	d00b      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800560e:	4bc0      	ldr	r3, [pc, #768]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005614:	f023 010c 	bic.w	r1, r3, #12
 8005618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	4abc      	ldr	r2, [pc, #752]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005620:	430b      	orrs	r3, r1
 8005622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f002 0a04 	and.w	sl, r2, #4
 8005632:	f04f 0b00 	mov.w	fp, #0
 8005636:	ea5a 030b 	orrs.w	r3, sl, fp
 800563a:	d00b      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800563c:	4bb4      	ldr	r3, [pc, #720]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800563e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005642:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	4ab0      	ldr	r2, [pc, #704]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800564e:	430b      	orrs	r3, r1
 8005650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0308 	and.w	r3, r2, #8
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800566a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d00b      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005674:	4ba6      	ldr	r3, [pc, #664]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800567a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	4aa2      	ldr	r2, [pc, #648]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005686:	430b      	orrs	r3, r1
 8005688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800568c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f002 0310 	and.w	r3, r2, #16
 8005698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800569c:	2300      	movs	r3, #0
 800569e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80056ac:	4b98      	ldr	r3, [pc, #608]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056bc:	4a94      	ldr	r2, [pc, #592]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056be:	430b      	orrs	r3, r1
 80056c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f002 0320 	and.w	r3, r2, #32
 80056d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d4:	2300      	movs	r3, #0
 80056d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80056da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80056de:	460b      	mov	r3, r1
 80056e0:	4313      	orrs	r3, r2
 80056e2:	d00b      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80056e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ea:	f023 0107 	bic.w	r1, r3, #7
 80056ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f4:	4a86      	ldr	r2, [pc, #536]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f6:	430b      	orrs	r3, r1
 80056f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005712:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d00b      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800571c:	4b7c      	ldr	r3, [pc, #496]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005722:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800572c:	4a78      	ldr	r2, [pc, #480]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800572e:	430b      	orrs	r3, r1
 8005730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800574a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d00b      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005754:	4b6e      	ldr	r3, [pc, #440]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800575a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800575e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005764:	4a6a      	ldr	r2, [pc, #424]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005766:	430b      	orrs	r3, r1
 8005768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800576c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800577c:	2300      	movs	r3, #0
 800577e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005782:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005786:	460b      	mov	r3, r1
 8005788:	4313      	orrs	r3, r2
 800578a:	d00b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800578c:	4b60      	ldr	r3, [pc, #384]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800578e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579c:	4a5c      	ldr	r2, [pc, #368]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057be:	460b      	mov	r3, r1
 80057c0:	4313      	orrs	r3, r2
 80057c2:	d00b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80057c4:	4b52      	ldr	r3, [pc, #328]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80057ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d6:	430b      	orrs	r3, r1
 80057d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80057e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d00b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80057fc:	4b44      	ldr	r3, [pc, #272]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005802:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800580c:	4a40      	ldr	r2, [pc, #256]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580e:	430b      	orrs	r3, r1
 8005810:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005824:	2300      	movs	r3, #0
 8005826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800582a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d00b      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800583e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005844:	4a32      	ldr	r2, [pc, #200]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005846:	430b      	orrs	r3, r1
 8005848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800584c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005862:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d00c      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587e:	4a24      	ldr	r2, [pc, #144]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005880:	430b      	orrs	r3, r1
 8005882:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005892:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005894:	2300      	movs	r3, #0
 8005896:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005898:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800589c:	460b      	mov	r3, r1
 800589e:	4313      	orrs	r3, r2
 80058a0:	d04f      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80058a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	2b80      	cmp	r3, #128	@ 0x80
 80058ac:	d02d      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80058ae:	2b80      	cmp	r3, #128	@ 0x80
 80058b0:	d827      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058b2:	2b60      	cmp	r3, #96	@ 0x60
 80058b4:	d02e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058b6:	2b60      	cmp	r3, #96	@ 0x60
 80058b8:	d823      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	d006      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d81f      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x326>
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80058ca:	e01a      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058cc:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058d8:	e01d      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058de:	3308      	adds	r3, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 fa17 	bl	8007d14 <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058ec:	e013      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f2:	332c      	adds	r3, #44	@ 0x2c
 80058f4:	4618      	mov	r0, r3
 80058f6:	f002 faa5 	bl	8007e44 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005900:	e009      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005908:	e005      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800590a:	bf00      	nop
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800590e:	bf00      	nop
 8005910:	46020c00 	.word	0x46020c00
        break;
 8005914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005916:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800591e:	4bb6      	ldr	r3, [pc, #728]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005924:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005930:	4ab1      	ldr	r2, [pc, #708]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005932:	430b      	orrs	r3, r1
 8005934:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800593e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800594e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005950:	2300      	movs	r3, #0
 8005952:	677b      	str	r3, [r7, #116]	@ 0x74
 8005954:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005958:	460b      	mov	r3, r1
 800595a:	4313      	orrs	r3, r2
 800595c:	d053      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800596a:	d033      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005970:	d82c      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005976:	d02f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800597c:	d826      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800597e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005982:	d008      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005988:	d820      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800598e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005992:	d011      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005994:	e01a      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005996:	4b98      	ldr	r3, [pc, #608]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	4a97      	ldr	r2, [pc, #604]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059a2:	e01a      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a8:	3308      	adds	r3, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f002 f9b2 	bl	8007d14 <RCCEx_PLL2_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059b6:	e010      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059bc:	332c      	adds	r3, #44	@ 0x2c
 80059be:	4618      	mov	r0, r3
 80059c0:	f002 fa40 	bl	8007e44 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059ca:	e006      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059d2:	e002      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10d      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80059e2:	4b85      	ldr	r3, [pc, #532]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059e8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f4:	4a80      	ldr	r2, [pc, #512]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059f6:	430b      	orrs	r3, r1
 80059f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a02:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a14:	2300      	movs	r3, #0
 8005a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d046      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a2e:	d028      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a34:	d821      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a3a:	d022      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a40:	d81b      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a46:	d01c      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a4c:	d815      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a58:	d80f      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a62:	d00e      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a64:	e009      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 f951 	bl	8007d14 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a78:	e004      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a92:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a9e:	4a56      	ldr	r2, [pc, #344]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005abe:	2300      	movs	r3, #0
 8005ac0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ac2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d03f      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d81e      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b03 	.word	0x08005b03
 8005aec:	08005b1f 	.word	0x08005b1f
 8005af0:	08005b1f 	.word	0x08005b1f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005af4:	4b40      	ldr	r3, [pc, #256]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	4a3f      	ldr	r2, [pc, #252]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005afe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b00:	e00e      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b06:	332c      	adds	r3, #44	@ 0x2c
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f002 f99b 	bl	8007e44 <RCCEx_PLL3_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005b1e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10d      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005b28:	4b33      	ldr	r3, [pc, #204]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b2e:	f023 0107 	bic.w	r1, r3, #7
 8005b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d04d      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b74:	d028      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b7a:	d821      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b80:	d024      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b86:	d81b      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b8c:	d00e      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005b8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b92:	d815      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9c:	d110      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b9e:	4b16      	ldr	r3, [pc, #88]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005baa:	e012      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb0:	332c      	adds	r3, #44	@ 0x2c
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f002 f946 	bl	8007e44 <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bc6:	e004      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005bc8:	bf00      	nop
 8005bca:	e002      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005bcc:	bf00      	nop
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005bd0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d110      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005bda:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005be0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bec:	4a02      	ldr	r2, [pc, #8]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005bf6:	bf00      	nop
 8005bf8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c00:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c12:	2300      	movs	r3, #0
 8005c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f000 80b5 	beq.w	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b9d      	ldr	r3, [pc, #628]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d113      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	4b9a      	ldr	r3, [pc, #616]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c3c:	4a98      	ldr	r2, [pc, #608]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c46:	4b96      	ldr	r3, [pc, #600]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005c5e:	4b91      	ldr	r3, [pc, #580]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	4a90      	ldr	r2, [pc, #576]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c6a:	f7fc f91b 	bl	8001ea4 <HAL_GetTick>
 8005c6e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005c72:	e00b      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c74:	f7fc f916 	bl	8001ea4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d903      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c8a:	e005      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005c8c:	4b85      	ldr	r3, [pc, #532]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ed      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005c98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d165      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d023      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01b      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cc6:	4b76      	ldr	r3, [pc, #472]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cd4:	4b72      	ldr	r3, [pc, #456]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cda:	4a71      	ldr	r2, [pc, #452]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cea:	4a6d      	ldr	r2, [pc, #436]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d019      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0a:	f7fc f8cb 	bl	8001ea4 <HAL_GetTick>
 8005d0e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d12:	e00d      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d14:	f7fc f8c6 	bl	8001ea4 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d903      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005d2e:	e006      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d30:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ea      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005d3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005d46:	4b56      	ldr	r3, [pc, #344]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d58:	4a51      	ldr	r2, [pc, #324]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d60:	e008      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005d6a:	e003      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d74:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d82:	4a47      	ldr	r2, [pc, #284]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d042      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005db0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005db4:	d022      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005db6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005dba:	d81b      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dc0:	d011      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dc6:	d815      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d019      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005dcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dd0:	d110      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 ff9b 	bl	8007d14 <RCCEx_PLL2_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005de4:	e00d      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005df2:	e006      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005dfa:	e002      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e00:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e10:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e1c:	4a20      	ldr	r2, [pc, #128]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e2a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d032      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e56:	d00b      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5c:	d804      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e66:	d007      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e6e:	e004      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005e70:	bf00      	nop
 8005e72:	e002      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005e74:	bf00      	nop
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005e78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d112      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005e82:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e94:	4a02      	ldr	r2, [pc, #8]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005e9e:	bf00      	nop
 8005ea0:	46020c00 	.word	0x46020c00
 8005ea4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005eac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	d00c      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005ecc:	4b98      	ldr	r3, [pc, #608]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ed2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ede:	4a94      	ldr	r2, [pc, #592]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005efc:	460b      	mov	r3, r1
 8005efe:	4313      	orrs	r3, r2
 8005f00:	d019      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f10:	4b87      	ldr	r3, [pc, #540]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	4a86      	ldr	r2, [pc, #536]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f1c:	4b84      	ldr	r3, [pc, #528]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f22:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f2e:	4a80      	ldr	r2, [pc, #512]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d00c      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005f52:	4b77      	ldr	r3, [pc, #476]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f64:	4972      	ldr	r1, [pc, #456]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005f78:	623b      	str	r3, [r7, #32]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d00c      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005f88:	4b69      	ldr	r3, [pc, #420]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f9a:	4965      	ldr	r1, [pc, #404]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fc4:	f023 0218 	bic.w	r2, r3, #24
 8005fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fcc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005fd0:	4957      	ldr	r1, [pc, #348]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	d032      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ffc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006000:	d105      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006002:	4b4b      	ldr	r3, [pc, #300]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	4a4a      	ldr	r2, [pc, #296]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800600e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800601a:	d108      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800601c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006020:	3308      	adds	r3, #8
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fe76 	bl	8007d14 <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800602e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006036:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800603c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006048:	4939      	ldr	r1, [pc, #228]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006056:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800605a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006070:	460b      	mov	r3, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	d03a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800607e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006082:	d00e      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006088:	d815      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800608e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006092:	d110      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006094:	4b26      	ldr	r3, [pc, #152]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	4a25      	ldr	r2, [pc, #148]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800609a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800609e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80060a0:	e00e      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a6:	3308      	adds	r3, #8
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fe33 	bl	8007d14 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80060b4:	e004      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060bc:	e000      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80060be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80060c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10d      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80060c8:	4b19      	ldr	r3, [pc, #100]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060da:	4915      	ldr	r1, [pc, #84]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80060ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006102:	460b      	mov	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	d00c      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800610a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800610e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800611a:	4905      	ldr	r1, [pc, #20]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006122:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8006126:	4618      	mov	r0, r3
 8006128:	37e8      	adds	r7, #232	@ 0xe8
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006130:	46020c00 	.word	0x46020c00

08006134 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	@ 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800613c:	4ba6      	ldr	r3, [pc, #664]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006146:	4ba4      	ldr	r3, [pc, #656]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006150:	4ba1      	ldr	r3, [pc, #644]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3301      	adds	r3, #1
 800615c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800615e:	4b9e      	ldr	r3, [pc, #632]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800616a:	4b9b      	ldr	r3, [pc, #620]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d062      	beq.n	8006252 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b03      	cmp	r3, #3
 8006190:	f200 8081 	bhi.w	8006296 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d024      	beq.n	80061e4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d17a      	bne.n	8006296 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80063dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b89      	ldr	r3, [pc, #548]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80061c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e2:	e08f      	b.n	8006304 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061e4:	4b7c      	ldr	r3, [pc, #496]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80061f0:	4b79      	ldr	r3, [pc, #484]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	0f1b      	lsrs	r3, r3, #28
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	e006      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80061fc:	4b76      	ldr	r3, [pc, #472]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	0f1b      	lsrs	r3, r3, #28
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	4a76      	ldr	r2, [pc, #472]	@ (80063e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006230:	ed97 6a02 	vldr	s12, [r7, #8]
 8006234:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006244:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006250:	e058      	b.n	8006304 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006264:	4b5c      	ldr	r3, [pc, #368]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006274:	ed97 6a02 	vldr	s12, [r7, #8]
 8006278:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800627c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006280:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006288:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006294:	e036      	b.n	8006304 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006296:	4b50      	ldr	r3, [pc, #320]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80062a2:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0f1b      	lsrs	r3, r3, #28
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80062ae:	4b4a      	ldr	r3, [pc, #296]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	0f1b      	lsrs	r3, r3, #28
 80062b8:	f003 030f 	and.w	r3, r3, #15
 80062bc:	4a49      	ldr	r2, [pc, #292]	@ (80063e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80062be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006302:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006304:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006310:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006326:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800632a:	edd7 6a07 	vldr	s13, [r7, #28]
 800632e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006336:	ee17 2a90 	vmov	r2, s15
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006346:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006352:	4b21      	ldr	r3, [pc, #132]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006368:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800636c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006378:	ee17 2a90 	vmov	r2, s15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006388:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006394:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006398:	0e1b      	lsrs	r3, r3, #24
 800639a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80063a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ba:	ee17 2a90 	vmov	r2, s15
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	@ 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	46020c00 	.word	0x46020c00
 80063dc:	4b742400 	.word	0x4b742400
 80063e0:	46000000 	.word	0x46000000
 80063e4:	08009638 	.word	0x08009638

080063e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b089      	sub	sp, #36	@ 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80063f0:	4ba6      	ldr	r3, [pc, #664]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80063fa:	4ba4      	ldr	r3, [pc, #656]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006404:	4ba1      	ldr	r3, [pc, #644]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	3301      	adds	r3, #1
 8006410:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006412:	4b9e      	ldr	r3, [pc, #632]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800641e:	4b9b      	ldr	r3, [pc, #620]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d062      	beq.n	8006506 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b03      	cmp	r3, #3
 8006444:	f200 8081 	bhi.w	800654a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d024      	beq.n	8006498 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d17a      	bne.n	800654a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006466:	4b89      	ldr	r3, [pc, #548]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006476:	ed97 6a02 	vldr	s12, [r7, #8]
 800647a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800647e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006482:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006496:	e08f      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006498:	4b7c      	ldr	r3, [pc, #496]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80064a4:	4b79      	ldr	r3, [pc, #484]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	0f1b      	lsrs	r3, r3, #28
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	e006      	b.n	80064be <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80064b0:	4b76      	ldr	r3, [pc, #472]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	0f1b      	lsrs	r3, r3, #28
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	4a76      	ldr	r2, [pc, #472]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80064c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80064fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006504:	e058      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006510:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006518:	4b5c      	ldr	r3, [pc, #368]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006528:	ed97 6a02 	vldr	s12, [r7, #8]
 800652c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006530:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006534:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006548:	e036      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800654a:	4b50      	ldr	r3, [pc, #320]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006556:	4b4d      	ldr	r3, [pc, #308]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	0f1b      	lsrs	r3, r3, #28
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006562:	4b4a      	ldr	r3, [pc, #296]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	0f1b      	lsrs	r3, r3, #28
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	4a49      	ldr	r2, [pc, #292]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006596:	ed97 6a02 	vldr	s12, [r7, #8]
 800659a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800659e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065b6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80065b8:	4b34      	ldr	r3, [pc, #208]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80065c4:	4b31      	ldr	r3, [pc, #196]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	0a5b      	lsrs	r3, r3, #9
 80065ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80065de:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ea:	ee17 2a90 	vmov	r2, s15
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e002      	b.n	80065fa <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80065fa:	4b24      	ldr	r3, [pc, #144]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d017      	beq.n	8006636 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006606:	4b21      	ldr	r3, [pc, #132]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800661c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006620:	edd7 6a07 	vldr	s13, [r7, #28]
 8006624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662c:	ee17 2a90 	vmov	r2, s15
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	e002      	b.n	800663c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800663c:	4b13      	ldr	r3, [pc, #76]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006648:	4b10      	ldr	r3, [pc, #64]	@ (800668c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800665e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006662:	edd7 6a07 	vldr	s13, [r7, #28]
 8006666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	ee17 2a90 	vmov	r2, s15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006676:	e002      	b.n	800667e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	609a      	str	r2, [r3, #8]
}
 800667e:	bf00      	nop
 8006680:	3724      	adds	r7, #36	@ 0x24
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	46020c00 	.word	0x46020c00
 8006690:	4b742400 	.word	0x4b742400
 8006694:	46000000 	.word	0x46000000
 8006698:	08009638 	.word	0x08009638

0800669c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	@ 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80066a4:	4ba6      	ldr	r3, [pc, #664]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80066ae:	4ba4      	ldr	r3, [pc, #656]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80066b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	0a1b      	lsrs	r3, r3, #8
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	3301      	adds	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80066c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80066d2:	4b9b      	ldr	r3, [pc, #620]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d062      	beq.n	80067ba <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	f200 8081 	bhi.w	80067fe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d024      	beq.n	800674c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d17a      	bne.n	80067fe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b89      	ldr	r3, [pc, #548]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800672a:	ed97 6a02 	vldr	s12, [r7, #8]
 800672e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800673a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800674a:	e08f      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800674c:	4b7c      	ldr	r3, [pc, #496]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006758:	4b79      	ldr	r3, [pc, #484]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	0f1b      	lsrs	r3, r3, #28
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	e006      	b.n	8006772 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006764:	4b76      	ldr	r3, [pc, #472]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	0f1b      	lsrs	r3, r3, #28
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	4a76      	ldr	r2, [pc, #472]	@ (800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006798:	ed97 6a02 	vldr	s12, [r7, #8]
 800679c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067b8:	e058      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80067c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80067e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fc:	e036      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067fe:	4b50      	ldr	r3, [pc, #320]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800680a:	4b4d      	ldr	r3, [pc, #308]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	e006      	b.n	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006816:	4b4a      	ldr	r3, [pc, #296]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	0f1b      	lsrs	r3, r3, #28
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	4a49      	ldr	r2, [pc, #292]	@ (800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a02 	vldr	s12, [r7, #8]
 800684e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800686a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800686c:	4b34      	ldr	r3, [pc, #208]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d017      	beq.n	80068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006878:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800687a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687c:	0a5b      	lsrs	r3, r3, #9
 800687e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800688a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800688e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006892:	edd7 6a07 	vldr	s13, [r7, #28]
 8006896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689e:	ee17 2a90 	vmov	r2, s15
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80068ae:	4b24      	ldr	r3, [pc, #144]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d017      	beq.n	80068ea <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068ba:	4b21      	ldr	r3, [pc, #132]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80068cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e0:	ee17 2a90 	vmov	r2, s15
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]
 80068e8:	e002      	b.n	80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80068f0:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d017      	beq.n	800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068fc:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006900:	0e1b      	lsrs	r3, r3, #24
 8006902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800690e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006912:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006916:	edd7 6a07 	vldr	s13, [r7, #28]
 800691a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006922:	ee17 2a90 	vmov	r2, s15
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800692a:	e002      	b.n	8006932 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
}
 8006932:	bf00      	nop
 8006934:	3724      	adds	r7, #36	@ 0x24
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	46020c00 	.word	0x46020c00
 8006944:	4b742400 	.word	0x4b742400
 8006948:	46000000 	.word	0x46000000
 800694c:	08009638 	.word	0x08009638

08006950 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	@ 0x38
 8006954:	af00      	add	r7, sp, #0
 8006956:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800695a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006962:	430b      	orrs	r3, r1
 8006964:	d145      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006966:	4ba7      	ldr	r3, [pc, #668]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800696c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006972:	4ba4      	ldr	r3, [pc, #656]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d108      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006986:	d104      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
 800698e:	f001 b9b3 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006992:	4b9c      	ldr	r3, [pc, #624]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a0:	d114      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a8:	d110      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069aa:	4b96      	ldr	r3, [pc, #600]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b8:	d103      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80069ba:	23fa      	movs	r3, #250	@ 0xfa
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069be:	f001 b99b 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80069c2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069c8:	f001 b996 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80069cc:	4b8d      	ldr	r3, [pc, #564]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069d8:	d107      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e0:	d103      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80069e2:	4b89      	ldr	r3, [pc, #548]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e6:	f001 b987 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ee:	f001 b983 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80069f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80069fa:	430b      	orrs	r3, r1
 80069fc:	d151      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80069fe:	4b81      	ldr	r3, [pc, #516]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a04:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006a08:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	2b80      	cmp	r3, #128	@ 0x80
 8006a0e:	d035      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	2b80      	cmp	r3, #128	@ 0x80
 8006a14:	d841      	bhi.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2b60      	cmp	r3, #96	@ 0x60
 8006a1a:	d02a      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	2b60      	cmp	r3, #96	@ 0x60
 8006a20:	d83b      	bhi.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	d009      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	2b40      	cmp	r3, #64	@ 0x40
 8006a2c:	d835      	bhi.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d012      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006a3a:	e02e      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fb77 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a4a:	f001 b955 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0318 	add.w	r3, r7, #24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fcc8 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a5c:	f001 b94c 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fe19 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a6e:	f001 b943 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a72:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a78:	f001 b93e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a7c:	4b61      	ldr	r3, [pc, #388]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a88:	d103      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006a8a:	4b60      	ldr	r3, [pc, #384]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a8e:	f001 b933 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a96:	f001 b92f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a9e:	f001 b92b 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	d158      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006aae:	4b55      	ldr	r3, [pc, #340]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ab4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ab8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac0:	d03b      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac8:	d846      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad0:	d02e      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad8:	d83e      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae0:	d00b      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae8:	d836      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00d      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af6:	d012      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006af8:	e02e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fb18 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b08:	f001 b8f6 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0c:	f107 0318 	add.w	r3, r7, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fc69 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b1a:	f001 b8ed 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b1e:	f107 030c 	add.w	r3, r7, #12
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fdba 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b2c:	f001 b8e4 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b30:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b36:	f001 b8df 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b3a:	4b32      	ldr	r3, [pc, #200]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b46:	d103      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006b48:	4b30      	ldr	r3, [pc, #192]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b4c:	f001 b8d4 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b54:	f001 b8d0 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b5c:	f001 b8cc 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	d126      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006b6c:	4b25      	ldr	r3, [pc, #148]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006b78:	4b22      	ldr	r3, [pc, #136]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b84:	d106      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b90:	f001 b8b2 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006b94:	4b1b      	ldr	r3, [pc, #108]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d103      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006baa:	4b19      	ldr	r3, [pc, #100]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	f001 b8a3 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb6:	f001 b89f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bbe:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	d16e      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bcc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bd8:	d03d      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006be0:	d85c      	bhi.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be8:	d014      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf0:	d854      	bhi.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01f      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bfe:	d012      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006c00:	e04c      	b.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c02:	bf00      	nop
 8006c04:	46020c00 	.word	0x46020c00
 8006c08:	0007a120 	.word	0x0007a120
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fa8b 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c22:	f001 b869 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fbdc 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c34:	f001 b860 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c38:	4ba7      	ldr	r3, [pc, #668]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c44:	d103      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006c46:	4ba5      	ldr	r3, [pc, #660]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c4a:	f001 b855 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c52:	f001 b851 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c56:	4ba0      	ldr	r3, [pc, #640]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d118      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c62:	4b9d      	ldr	r3, [pc, #628]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c6e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	e006      	b.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006c7a:	4b97      	ldr	r3, [pc, #604]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	0e1b      	lsrs	r3, r3, #24
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	4a95      	ldr	r2, [pc, #596]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c90:	f001 b832 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c98:	f001 b82e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca0:	f001 b82a 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006cac:	430b      	orrs	r3, r1
 8006cae:	d17f      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006cb0:	4b89      	ldr	r3, [pc, #548]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d165      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006cc2:	4b85      	ldr	r3, [pc, #532]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cc8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cd4:	d034      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cdc:	d853      	bhi.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce4:	d00b      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cec:	d84b      	bhi.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cfa:	d009      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006cfc:	e043      	b.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fa16 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d0c:	f000 bff4 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d10:	f107 0318 	add.w	r3, r7, #24
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fb67 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d1e:	f000 bfeb 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d22:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d2e:	d103      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006d30:	4b6a      	ldr	r3, [pc, #424]	@ (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d32:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d34:	f000 bfe0 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d3c:	f000 bfdc 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d40:	4b65      	ldr	r3, [pc, #404]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d118      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d4c:	4b62      	ldr	r3, [pc, #392]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006d58:	4b5f      	ldr	r3, [pc, #380]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	e006      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006d64:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	0e1b      	lsrs	r3, r3, #24
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d7a:	f000 bfbd 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d82:	f000 bfb9 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d8a:	f000 bfb5 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d94:	d108      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff f9ca 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da4:	f000 bfa8 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dac:	f000 bfa4 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	1e51      	subs	r1, r2, #1
 8006db6:	430b      	orrs	r3, r1
 8006db8:	d136      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006dba:	4b47      	ldr	r3, [pc, #284]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fe fb44 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 8006dd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dd2:	f000 bf91 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d104      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ddc:	f7fe fa0c 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8006de0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006de2:	f000 bf89 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006de6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df2:	d106      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d103      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	f000 bf7b 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006e02:	4b35      	ldr	r3, [pc, #212]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d104      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1c:	f000 bf6c 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e24:	f000 bf68 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2c:	1e91      	subs	r1, r2, #2
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	d136      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e32:	4b29      	ldr	r3, [pc, #164]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e44:	f7fe faf4 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8006e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e4a:	f000 bf55 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d104      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e54:	f7fe f9d0 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8006e58:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e5a:	f000 bf4d 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d103      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	f000 bf3f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006e7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d107      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	2b0c      	cmp	r3, #12
 8006e8c:	d104      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e94:	f000 bf30 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	f000 bf2c 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	1f11      	subs	r1, r2, #4
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	d13f      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006eb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe fab8 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ec2:	f000 bf19 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ecc:	f7fe f994 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8006ed0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ed2:	f000 bf11 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006ed6:	bf00      	nop
 8006ed8:	46020c00 	.word	0x46020c00
 8006edc:	02dc6c00 	.word	0x02dc6c00
 8006ee0:	08009638 	.word	0x08009638
 8006ee4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006ee8:	4ba6      	ldr	r3, [pc, #664]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d103      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006efc:	4ba2      	ldr	r3, [pc, #648]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f00:	f000 befa 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f04:	4b9f      	ldr	r3, [pc, #636]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d107      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2b30      	cmp	r3, #48	@ 0x30
 8006f16:	d104      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	f000 beeb 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	f000 bee7 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2e:	f1a2 0108 	sub.w	r1, r2, #8
 8006f32:	430b      	orrs	r3, r1
 8006f34:	d136      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f36:	4b93      	ldr	r3, [pc, #588]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fe fa72 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f4e:	f000 bed3 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d104      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fe f94e 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8006f5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f5e:	f000 becb 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f62:	4b88      	ldr	r3, [pc, #544]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d103      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006f76:	4b84      	ldr	r3, [pc, #528]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7a:	f000 bebd 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006f7e:	4b81      	ldr	r3, [pc, #516]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f90:	d104      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f98:	f000 beae 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa0:	f000 beaa 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa8:	f1a2 0110 	sub.w	r1, r2, #16
 8006fac:	430b      	orrs	r3, r1
 8006fae:	d139      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006fb0:	4b74      	ldr	r3, [pc, #464]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fe fa35 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fc8:	f000 be96 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd2:	d104      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fd4:	f7fe f910 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8006fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fda:	f000 be8d 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006fde:	4b69      	ldr	r3, [pc, #420]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fea:	d107      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff2:	d103      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006ff4:	4b64      	ldr	r3, [pc, #400]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	f000 be7e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006ffc:	4b61      	ldr	r3, [pc, #388]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b02      	cmp	r3, #2
 8007008:	d108      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007010:	d104      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
 8007018:	f000 be6e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007020:	f000 be6a 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007028:	f1a2 0120 	sub.w	r1, r2, #32
 800702c:	430b      	orrs	r3, r1
 800702e:	d158      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007030:	4b54      	ldr	r3, [pc, #336]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007042:	f7fe fa1d 	bl	8005480 <HAL_RCC_GetPCLK3Freq>
 8007046:	6378      	str	r0, [r7, #52]	@ 0x34
 8007048:	f000 be56 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	2b01      	cmp	r3, #1
 8007050:	d104      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007052:	f7fe f8d1 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007056:	6378      	str	r0, [r7, #52]	@ 0x34
 8007058:	f000 be4e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800705c:	4b49      	ldr	r3, [pc, #292]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007068:	d106      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	2b02      	cmp	r3, #2
 800706e:	d103      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007070:	4b45      	ldr	r3, [pc, #276]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	f000 be40 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007078:	4b42      	ldr	r3, [pc, #264]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800707a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d107      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2b03      	cmp	r3, #3
 800708a:	d104      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800708c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
 8007092:	f000 be31 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d11b      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d118      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070a8:	4b36      	ldr	r3, [pc, #216]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80070b4:	4b33      	ldr	r3, [pc, #204]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	e006      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80070c0:	4b30      	ldr	r3, [pc, #192]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	4a2f      	ldr	r2, [pc, #188]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	f000 be0f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070de:	f000 be0b 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80070e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80070ea:	430b      	orrs	r3, r1
 80070ec:	d172      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80070ee:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80070f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007100:	d104      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007102:	f7fe f879 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007106:	6378      	str	r0, [r7, #52]	@ 0x34
 8007108:	f000 bdf6 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007112:	d108      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007114:	f107 0318 	add.w	r3, r7, #24
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff f965 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
 8007122:	f000 bde9 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800712c:	f7fe f966 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8007130:	6378      	str	r0, [r7, #52]	@ 0x34
 8007132:	f000 bde1 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800713c:	d128      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800713e:	4b11      	ldr	r3, [pc, #68]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d118      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800714a:	4b0e      	ldr	r3, [pc, #56]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007156:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	0e1b      	lsrs	r3, r3, #24
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007162:	4b08      	ldr	r3, [pc, #32]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	0e1b      	lsrs	r3, r3, #24
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	4a06      	ldr	r2, [pc, #24]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
 8007178:	f000 bdbe 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007180:	f000 bdba 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007184:	46020c00 	.word	0x46020c00
 8007188:	00f42400 	.word	0x00f42400
 800718c:	08009638 	.word	0x08009638
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007190:	4baf      	ldr	r3, [pc, #700]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071a4:	d103      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80071a6:	4bab      	ldr	r3, [pc, #684]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071aa:	f000 bda5 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80071ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ba:	d107      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071c2:	d103      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80071c4:	4ba3      	ldr	r3, [pc, #652]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c8:	f000 bd96 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d0:	f000 bd92 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80071d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80071dc:	430b      	orrs	r3, r1
 80071de:	d158      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80071e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d84b      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007231 	.word	0x08007231
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	0800721f 	.word	0x0800721f
 8007204:	0800723b 	.word	0x0800723b
 8007208:	08007245 	.word	0x08007245
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800720c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe ff8f 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800721a:	f000 bd6d 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721e:	f107 030c 	add.w	r3, r7, #12
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fa3a 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800722c:	f000 bd64 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007230:	f7fe f8e4 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8007234:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007236:	f000 bd5f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800723a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007240:	f000 bd5a 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007244:	4b82      	ldr	r3, [pc, #520]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b20      	cmp	r3, #32
 800724e:	d118      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007250:	4b7f      	ldr	r3, [pc, #508]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800725c:	4b7c      	ldr	r3, [pc, #496]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007268:	4b79      	ldr	r3, [pc, #484]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800726a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a78      	ldr	r2, [pc, #480]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800727e:	f000 bd3b 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007286:	f000 bd37 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800728e:	f000 bd33 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007296:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800729a:	430b      	orrs	r3, r1
 800729c:	d167      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800729e:	4b6c      	ldr	r3, [pc, #432]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80072a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072b0:	d036      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072b8:	d855      	bhi.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072c0:	d029      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072c8:	d84d      	bhi.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d0:	d013      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d8:	d845      	bhi.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d015      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e6:	d13e      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe ff21 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f6:	f000 bcff 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072fa:	f107 030c 	add.w	r3, r7, #12
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff f9cc 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007308:	f000 bcf6 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800730c:	f7fe f876 	bl	80053fc <HAL_RCC_GetHCLKFreq>
 8007310:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007312:	f000 bcf1 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007316:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800731c:	f000 bcec 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007320:	4b4b      	ldr	r3, [pc, #300]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b20      	cmp	r3, #32
 800732a:	d118      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800732c:	4b48      	ldr	r3, [pc, #288]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8007338:	4b45      	ldr	r3, [pc, #276]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	e006      	b.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007344:	4b42      	ldr	r3, [pc, #264]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	4a41      	ldr	r2, [pc, #260]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800735a:	f000 bccd 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007362:	f000 bcc9 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800736a:	f000 bcc5 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800736e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007372:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007376:	430b      	orrs	r3, r1
 8007378:	d14c      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800737a:	4b35      	ldr	r3, [pc, #212]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800737c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800738c:	f7fe f850 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8007390:	6378      	str	r0, [r7, #52]	@ 0x34
 8007392:	f000 bcb1 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739c:	d104      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800739e:	f7fd ff2b 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80073a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80073a4:	f000 bca8 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80073a8:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b4:	d107      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073bc:	d103      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80073be:	4b25      	ldr	r3, [pc, #148]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	f000 bc99 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80073c6:	4b22      	ldr	r3, [pc, #136]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d11c      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073d8:	d118      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073da:	4b1d      	ldr	r3, [pc, #116]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80073e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	0e1b      	lsrs	r3, r3, #24
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	e006      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80073f2:	4b17      	ldr	r3, [pc, #92]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	0e1b      	lsrs	r3, r3, #24
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	f000 bc76 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007410:	f000 bc72 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007418:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800741c:	430b      	orrs	r3, r1
 800741e:	d153      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007426:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800742a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007432:	f7fd fffd 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8007436:	6378      	str	r0, [r7, #52]	@ 0x34
 8007438:	f000 bc5e 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007442:	d10b      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007444:	f7fd fed8 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007448:	6378      	str	r0, [r7, #52]	@ 0x34
 800744a:	f000 bc55 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800744e:	bf00      	nop
 8007450:	46020c00 	.word	0x46020c00
 8007454:	00f42400 	.word	0x00f42400
 8007458:	08009638 	.word	0x08009638
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800745c:	4ba1      	ldr	r3, [pc, #644]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007468:	d107      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007470:	d103      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8007472:	4b9d      	ldr	r3, [pc, #628]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
 8007476:	f000 bc3f 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800747a:	4b9a      	ldr	r3, [pc, #616]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b20      	cmp	r3, #32
 8007484:	d11c      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800748c:	d118      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800748e:	4b95      	ldr	r3, [pc, #596]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800749a:	4b92      	ldr	r3, [pc, #584]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	0e1b      	lsrs	r3, r3, #24
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	e006      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80074a6:	4b8f      	ldr	r3, [pc, #572]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	0e1b      	lsrs	r3, r3, #24
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	4a8d      	ldr	r2, [pc, #564]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80074b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	f000 bc1c 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c4:	f000 bc18 	b.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80074c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074cc:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80074d0:	430b      	orrs	r3, r1
 80074d2:	d151      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80074d4:	4b83      	ldr	r3, [pc, #524]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80074e4:	d024      	beq.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80074ea:	d842      	bhi.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	2b80      	cmp	r3, #128	@ 0x80
 80074f0:	d00d      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	2b80      	cmp	r3, #128	@ 0x80
 80074f6:	d83c      	bhi.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2b40      	cmp	r3, #64	@ 0x40
 8007502:	d011      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007504:	e035      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007506:	f7fd ffbb 	bl	8005480 <HAL_RCC_GetPCLK3Freq>
 800750a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800750c:	e3f4      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800750e:	4b75      	ldr	r3, [pc, #468]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751a:	d102      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800751c:	4b72      	ldr	r3, [pc, #456]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007520:	e3ea      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007526:	e3e7      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007528:	f7fd fe66 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 800752c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800752e:	e3e3      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007530:	4b6c      	ldr	r3, [pc, #432]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b20      	cmp	r3, #32
 800753a:	d117      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800753c:	4b69      	ldr	r3, [pc, #420]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8007548:	4b66      	ldr	r3, [pc, #408]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	e006      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007554:	4b63      	ldr	r3, [pc, #396]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	4a62      	ldr	r2, [pc, #392]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800756a:	e3c5      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007570:	e3c2      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007576:	e3bf      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800757c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007580:	430b      	orrs	r3, r1
 8007582:	d147      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007584:	4b57      	ldr	r3, [pc, #348]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800758a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800758e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007596:	f7fd ff4b 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 800759a:	6378      	str	r0, [r7, #52]	@ 0x34
 800759c:	e3ac      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075a4:	d103      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fd fe27 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80075aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80075ac:	e3a4      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80075ae:	4b4d      	ldr	r3, [pc, #308]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ba:	d106      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c2:	d102      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80075c4:	4b48      	ldr	r3, [pc, #288]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c8:	e396      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80075ca:	4b46      	ldr	r3, [pc, #280]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d11b      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075dc:	d117      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075de:	4b41      	ldr	r3, [pc, #260]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80075ea:	4b3e      	ldr	r3, [pc, #248]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0e1b      	lsrs	r3, r3, #24
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	e006      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80075f6:	4b3b      	ldr	r3, [pc, #236]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	0e1b      	lsrs	r3, r3, #24
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	4a39      	ldr	r2, [pc, #228]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
 800760c:	e374      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	637b      	str	r3, [r7, #52]	@ 0x34
 8007612:	e371      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007618:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800761c:	430b      	orrs	r3, r1
 800761e:	d16a      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007620:	4b30      	ldr	r3, [pc, #192]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d120      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007632:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b20      	cmp	r3, #32
 800763c:	d117      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800763e:	4b29      	ldr	r3, [pc, #164]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800764a:	4b26      	ldr	r3, [pc, #152]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	e006      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007656:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	0e1b      	lsrs	r3, r3, #24
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	4a21      	ldr	r2, [pc, #132]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
 800766c:	e344      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
 8007672:	e341      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007674:	4b1b      	ldr	r3, [pc, #108]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800767a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800767e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007682:	d112      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768a:	d10e      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800768c:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800768e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800769c:	23fa      	movs	r3, #250	@ 0xfa
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076a0:	e32a      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80076a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076a8:	e326      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80076aa:	4b0e      	ldr	r3, [pc, #56]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076be:	d102      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80076c0:	4b09      	ldr	r3, [pc, #36]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c4:	e318      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80076c6:	4b07      	ldr	r3, [pc, #28]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d10d      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076da:	d109      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80076dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	e309      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80076e4:	46020c00 	.word	0x46020c00
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	08009638 	.word	0x08009638
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f4:	e300      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80076f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fa:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80076fe:	430b      	orrs	r3, r1
 8007700:	d164      	bne.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007702:	4ba2      	ldr	r3, [pc, #648]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007708:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	2b00      	cmp	r3, #0
 8007712:	d120      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007714:	4b9d      	ldr	r3, [pc, #628]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b20      	cmp	r3, #32
 800771e:	d117      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007720:	4b9a      	ldr	r3, [pc, #616]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800772c:	4b97      	ldr	r3, [pc, #604]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	0e1b      	lsrs	r3, r3, #24
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	e006      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007738:	4b94      	ldr	r3, [pc, #592]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800773a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	0e1b      	lsrs	r3, r3, #24
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	4a92      	ldr	r2, [pc, #584]	@ (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
 800774e:	e2d3      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
 8007754:	e2d0      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007756:	4b8d      	ldr	r3, [pc, #564]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800775c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007764:	d112      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776c:	d10e      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800776e:	4b87      	ldr	r3, [pc, #540]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800777c:	d102      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800777e:	23fa      	movs	r3, #250	@ 0xfa
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007782:	e2b9      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007784:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007788:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800778a:	e2b5      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800778c:	4b7f      	ldr	r3, [pc, #508]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007798:	d106      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077a0:	d102      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80077a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a6:	e2a7      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80077a8:	4b78      	ldr	r3, [pc, #480]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d107      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077bc:	d103      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80077be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	e298      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ca:	e295      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80077d4:	430b      	orrs	r3, r1
 80077d6:	d147      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077d8:	4b6c      	ldr	r3, [pc, #432]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80077e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077ea:	f7fd fe21 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 80077ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80077f0:	e282      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80077f2:	4b66      	ldr	r3, [pc, #408]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007800:	d112      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007808:	d10e      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800780a:	4b60      	ldr	r3, [pc, #384]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800780c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800781a:	23fa      	movs	r3, #250	@ 0xfa
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800781e:	e26b      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007820:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007826:	e267      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007828:	4b58      	ldr	r3, [pc, #352]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007834:	d106      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800783e:	4b55      	ldr	r3, [pc, #340]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
 8007842:	e259      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007844:	4b51      	ldr	r3, [pc, #324]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d107      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007858:	d103      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800785a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e24a      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	e247      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007870:	430b      	orrs	r3, r1
 8007872:	d12d      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007874:	4b45      	ldr	r3, [pc, #276]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800787a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800787e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007880:	4b42      	ldr	r3, [pc, #264]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800788c:	d105      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007894:	4b3f      	ldr	r3, [pc, #252]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	e22e      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078a0:	d107      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fc44 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b0:	e222      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078b8:	d107      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ba:	f107 0318 	add.w	r3, r7, #24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fd92 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c8:	e216      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ce:	e213      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80078d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80078d8:	430b      	orrs	r3, r1
 80078da:	d15d      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80078dc:	4b2b      	ldr	r3, [pc, #172]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80078e6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078ee:	d028      	beq.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f6:	d845      	bhi.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078fe:	d013      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007906:	d83d      	bhi.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007914:	d004      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007916:	e035      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd fd9e 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 800791c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800791e:	e1eb      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007920:	f7fd fc6a 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007924:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007926:	e1e7      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007928:	4b18      	ldr	r3, [pc, #96]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007936:	4b17      	ldr	r3, [pc, #92]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800793a:	e1dd      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007940:	e1da      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007942:	4b12      	ldr	r3, [pc, #72]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b20      	cmp	r3, #32
 800794c:	d117      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800794e:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800795a:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	0e1b      	lsrs	r3, r3, #24
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007966:	4b09      	ldr	r3, [pc, #36]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	0e1b      	lsrs	r3, r3, #24
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	4a06      	ldr	r2, [pc, #24]	@ (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800797c:	e1bc      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007982:	e1b9      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007988:	e1b6      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800798a:	bf00      	nop
 800798c:	46020c00 	.word	0x46020c00
 8007990:	08009638 	.word	0x08009638
 8007994:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80079a0:	430b      	orrs	r3, r1
 80079a2:	d156      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80079a4:	4ba5      	ldr	r3, [pc, #660]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079b6:	d028      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079be:	d845      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079c6:	d013      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ce:	d83d      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079dc:	d004      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80079de:	e035      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fd fd26 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079e6:	e187      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079e8:	f7fd fc06 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80079ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079ee:	e183      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f0:	4b92      	ldr	r3, [pc, #584]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fc:	d102      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80079fe:	4b90      	ldr	r3, [pc, #576]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a02:	e179      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a08:	e176      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a0a:	4b8c      	ldr	r3, [pc, #560]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d117      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a16:	4b89      	ldr	r3, [pc, #548]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007a22:	4b86      	ldr	r3, [pc, #536]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	0e1b      	lsrs	r3, r3, #24
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007a2e:	4b83      	ldr	r3, [pc, #524]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	4a81      	ldr	r2, [pc, #516]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a44:	e158      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4a:	e155      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a50:	e152      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a56:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	d177      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a5e:	4b77      	ldr	r3, [pc, #476]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a64:	f003 0318 	and.w	r3, r3, #24
 8007a68:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	2b18      	cmp	r3, #24
 8007a6e:	d86b      	bhi.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007a70:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007b49 	.word	0x08007b49
 8007a80:	08007b49 	.word	0x08007b49
 8007a84:	08007b49 	.word	0x08007b49
 8007a88:	08007b49 	.word	0x08007b49
 8007a8c:	08007b49 	.word	0x08007b49
 8007a90:	08007b49 	.word	0x08007b49
 8007a94:	08007b49 	.word	0x08007b49
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007b49 	.word	0x08007b49
 8007aa0:	08007b49 	.word	0x08007b49
 8007aa4:	08007b49 	.word	0x08007b49
 8007aa8:	08007b49 	.word	0x08007b49
 8007aac:	08007b49 	.word	0x08007b49
 8007ab0:	08007b49 	.word	0x08007b49
 8007ab4:	08007b49 	.word	0x08007b49
 8007ab8:	08007aed 	.word	0x08007aed
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b49 	.word	0x08007b49
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b49 	.word	0x08007b49
 8007ad4:	08007b49 	.word	0x08007b49
 8007ad8:	08007b07 	.word	0x08007b07
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007adc:	f7fd fcd0 	bl	8005480 <HAL_RCC_GetPCLK3Freq>
 8007ae0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ae2:	e109      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ae4:	f7fd fb88 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007ae8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007aea:	e105      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aec:	4b53      	ldr	r3, [pc, #332]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007af8:	d102      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007afa:	4b51      	ldr	r3, [pc, #324]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007afe:	e0fb      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b04:	e0f8      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b06:	4b4d      	ldr	r3, [pc, #308]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d117      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b12:	4b4a      	ldr	r3, [pc, #296]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007b1e:	4b47      	ldr	r3, [pc, #284]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	0e1b      	lsrs	r3, r3, #24
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	e006      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007b2a:	4b44      	ldr	r3, [pc, #272]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	0e1b      	lsrs	r3, r3, #24
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	4a42      	ldr	r2, [pc, #264]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b40:	e0da      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b46:	e0d7      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b4c:	e0d4      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b52:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007b56:	430b      	orrs	r3, r1
 8007b58:	d155      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b5a:	4b38      	ldr	r3, [pc, #224]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007b64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b6c:	d013      	beq.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b74:	d844      	bhi.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b7c:	d013      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b84:	d83c      	bhi.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d014      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b92:	d014      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007b94:	e034      	b.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b96:	f107 0318 	add.w	r3, r7, #24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fc24 	bl	80063e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ba4:	e0a8      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fac2 	bl	8006134 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb4:	e0a0      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007bb6:	f7fd fb1f 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007bba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bbc:	e09c      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d117      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bca:	4b1c      	ldr	r3, [pc, #112]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007bd6:	4b19      	ldr	r3, [pc, #100]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	e006      	b.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007be2:	4b16      	ldr	r3, [pc, #88]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007be8:	041b      	lsls	r3, r3, #16
 8007bea:	0e1b      	lsrs	r3, r3, #24
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	4a14      	ldr	r2, [pc, #80]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bf8:	e07e      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bfe:	e07b      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c04:	e078      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	d138      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c12:	4b0a      	ldr	r3, [pc, #40]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c1c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c1e:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d10d      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c38:	e05e      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007c3a:	bf00      	nop
 8007c3c:	46020c00 	.word	0x46020c00
 8007c40:	00f42400 	.word	0x00f42400
 8007c44:	08009638 	.word	0x08009638
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c48:	4b2e      	ldr	r3, [pc, #184]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c56:	d112      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c5e:	d10e      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c60:	4b28      	ldr	r3, [pc, #160]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c6e:	d102      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007c70:	23fa      	movs	r3, #250	@ 0xfa
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c74:	e040      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c7c:	e03c      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	e039      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c88:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	d131      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c90:	4b1c      	ldr	r3, [pc, #112]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c9c:	4b19      	ldr	r3, [pc, #100]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca8:	d105      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007cb0:	4b15      	ldr	r3, [pc, #84]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb4:	e020      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc2:	d106      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cca:	d102      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd0:	e012      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cde:	d106      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ce6:	d102      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007ce8:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	e004      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf2:	e001      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3738      	adds	r7, #56	@ 0x38
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	46020c00 	.word	0x46020c00
 8007d08:	02dc6c00 	.word	0x02dc6c00
 8007d0c:	016e3600 	.word	0x016e3600
 8007d10:	00f42400 	.word	0x00f42400

08007d14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d1c:	4b47      	ldr	r3, [pc, #284]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a46      	ldr	r2, [pc, #280]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d28:	f7fa f8bc 	bl	8001ea4 <HAL_GetTick>
 8007d2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d2e:	e008      	b.n	8007d42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d30:	f7fa f8b8 	bl	8001ea4 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e077      	b.n	8007e32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d42:	4b3e      	ldr	r3, [pc, #248]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1f0      	bne.n	8007d30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6811      	ldr	r1, [r2, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6852      	ldr	r2, [r2, #4]
 8007d62:	3a01      	subs	r2, #1
 8007d64:	0212      	lsls	r2, r2, #8
 8007d66:	430a      	orrs	r2, r1
 8007d68:	4934      	ldr	r1, [pc, #208]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007d6e:	4b33      	ldr	r3, [pc, #204]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d72:	4b33      	ldr	r3, [pc, #204]	@ (8007e40 <RCCEx_PLL2_Config+0x12c>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6892      	ldr	r2, [r2, #8]
 8007d7a:	3a01      	subs	r2, #1
 8007d7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	68d2      	ldr	r2, [r2, #12]
 8007d84:	3a01      	subs	r2, #1
 8007d86:	0252      	lsls	r2, r2, #9
 8007d88:	b292      	uxth	r2, r2
 8007d8a:	4311      	orrs	r1, r2
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6912      	ldr	r2, [r2, #16]
 8007d90:	3a01      	subs	r2, #1
 8007d92:	0412      	lsls	r2, r2, #16
 8007d94:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007d98:	4311      	orrs	r1, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6952      	ldr	r2, [r2, #20]
 8007d9e:	3a01      	subs	r2, #1
 8007da0:	0612      	lsls	r2, r2, #24
 8007da2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007da6:	430a      	orrs	r2, r1
 8007da8:	4924      	ldr	r1, [pc, #144]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007dae:	4b23      	ldr	r3, [pc, #140]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db2:	f023 020c 	bic.w	r2, r3, #12
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	4920      	ldr	r1, [pc, #128]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	491c      	ldr	r1, [pc, #112]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007dce:	4b1b      	ldr	r3, [pc, #108]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dda:	4b18      	ldr	r3, [pc, #96]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007de2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	69d2      	ldr	r2, [r2, #28]
 8007dea:	00d2      	lsls	r2, r2, #3
 8007dec:	4913      	ldr	r1, [pc, #76]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007df2:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df6:	4a11      	ldr	r2, [pc, #68]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007df8:	f043 0310 	orr.w	r3, r3, #16
 8007dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a0e      	ldr	r2, [pc, #56]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007e04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e0a:	f7fa f84b 	bl	8001ea4 <HAL_GetTick>
 8007e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e10:	e008      	b.n	8007e24 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e12:	f7fa f847 	bl	8001ea4 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <RCCEx_PLL2_Config+0x128>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0

}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	46020c00 	.word	0x46020c00
 8007e40:	80800000 	.word	0x80800000

08007e44 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007e4c:	4b47      	ldr	r3, [pc, #284]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a46      	ldr	r2, [pc, #280]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e58:	f7fa f824 	bl	8001ea4 <HAL_GetTick>
 8007e5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e5e:	e008      	b.n	8007e72 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e60:	f7fa f820 	bl	8001ea4 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e077      	b.n	8007f62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e72:	4b3e      	ldr	r3, [pc, #248]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007e86:	f023 0303 	bic.w	r3, r3, #3
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6811      	ldr	r1, [r2, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6852      	ldr	r2, [r2, #4]
 8007e92:	3a01      	subs	r2, #1
 8007e94:	0212      	lsls	r2, r2, #8
 8007e96:	430a      	orrs	r2, r1
 8007e98:	4934      	ldr	r1, [pc, #208]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	630b      	str	r3, [r1, #48]	@ 0x30
 8007e9e:	4b33      	ldr	r3, [pc, #204]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ea2:	4b33      	ldr	r3, [pc, #204]	@ (8007f70 <RCCEx_PLL3_Config+0x12c>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6892      	ldr	r2, [r2, #8]
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	68d2      	ldr	r2, [r2, #12]
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0252      	lsls	r2, r2, #9
 8007eb8:	b292      	uxth	r2, r2
 8007eba:	4311      	orrs	r1, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6912      	ldr	r2, [r2, #16]
 8007ec0:	3a01      	subs	r2, #1
 8007ec2:	0412      	lsls	r2, r2, #16
 8007ec4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007ec8:	4311      	orrs	r1, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6952      	ldr	r2, [r2, #20]
 8007ece:	3a01      	subs	r2, #1
 8007ed0:	0612      	lsls	r2, r2, #24
 8007ed2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	4924      	ldr	r1, [pc, #144]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007ede:	4b23      	ldr	r3, [pc, #140]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee2:	f023 020c 	bic.w	r2, r3, #12
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	4920      	ldr	r1, [pc, #128]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	491c      	ldr	r1, [pc, #112]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007efe:	4b1b      	ldr	r3, [pc, #108]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	4a1a      	ldr	r2, [pc, #104]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f04:	f023 0310 	bic.w	r3, r3, #16
 8007f08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f0a:	4b18      	ldr	r3, [pc, #96]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	69d2      	ldr	r2, [r2, #28]
 8007f1a:	00d2      	lsls	r2, r2, #3
 8007f1c:	4913      	ldr	r1, [pc, #76]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f22:	4b12      	ldr	r3, [pc, #72]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f26:	4a11      	ldr	r2, [pc, #68]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f28:	f043 0310 	orr.w	r3, r3, #16
 8007f2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a0e      	ldr	r2, [pc, #56]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f3a:	f7f9 ffb3 	bl	8001ea4 <HAL_GetTick>
 8007f3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f40:	e008      	b.n	8007f54 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f42:	f7f9 ffaf 	bl	8001ea4 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e006      	b.n	8007f62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f54:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <RCCEx_PLL3_Config+0x128>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0f0      	beq.n	8007f42 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	46020c00 	.word	0x46020c00
 8007f70:	80800000 	.word	0x80800000

08007f74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e0fb      	b.n	800817e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a7f      	ldr	r2, [pc, #508]	@ (8008188 <HAL_SPI_Init+0x214>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <HAL_SPI_Init+0x26>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a7d      	ldr	r2, [pc, #500]	@ (800818c <HAL_SPI_Init+0x218>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	e000      	b.n	8007f9c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007f9a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a78      	ldr	r2, [pc, #480]	@ (8008188 <HAL_SPI_Init+0x214>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <HAL_SPI_Init+0x42>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a76      	ldr	r2, [pc, #472]	@ (800818c <HAL_SPI_Init+0x218>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d105      	bne.n	8007fc2 <HAL_SPI_Init+0x4e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d901      	bls.n	8007fc2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e0dd      	b.n	800817e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8ec 	bl	80081a0 <SPI_GetPacketSize>
 8007fc8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a6e      	ldr	r2, [pc, #440]	@ (8008188 <HAL_SPI_Init+0x214>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_SPI_Init+0x6a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800818c <HAL_SPI_Init+0x218>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d102      	bne.n	8007fe4 <HAL_SPI_Init+0x70>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d816      	bhi.n	8008012 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fe8:	4a69      	ldr	r2, [pc, #420]	@ (8008190 <HAL_SPI_Init+0x21c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00e      	beq.n	800800c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a68      	ldr	r2, [pc, #416]	@ (8008194 <HAL_SPI_Init+0x220>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d009      	beq.n	800800c <HAL_SPI_Init+0x98>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a66      	ldr	r2, [pc, #408]	@ (8008198 <HAL_SPI_Init+0x224>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d004      	beq.n	800800c <HAL_SPI_Init+0x98>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a65      	ldr	r2, [pc, #404]	@ (800819c <HAL_SPI_Init+0x228>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d104      	bne.n	8008016 <HAL_SPI_Init+0xa2>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b10      	cmp	r3, #16
 8008010:	d901      	bls.n	8008016 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e0b3      	b.n	800817e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7f9 fc1a 	bl	8001864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008052:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800805c:	d119      	bne.n	8008092 <HAL_SPI_Init+0x11e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008066:	d103      	bne.n	8008070 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d008      	beq.n	8008082 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10c      	bne.n	8008092 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800807c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008080:	d107      	bne.n	8008092 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008090:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00f      	beq.n	80080be <HAL_SPI_Init+0x14a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d90b      	bls.n	80080be <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	e007      	b.n	80080ce <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d6:	431a      	orrs	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e0:	ea42 0103 	orr.w	r1, r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800813a:	ea42 0103 	orr.w	r1, r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	46002000 	.word	0x46002000
 800818c:	56002000 	.word	0x56002000
 8008190:	40013000 	.word	0x40013000
 8008194:	50013000 	.word	0x50013000
 8008198:	40003800 	.word	0x40003800
 800819c:	50003800 	.word	0x50003800

080081a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ac:	095b      	lsrs	r3, r3, #5
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	3307      	adds	r3, #7
 80081be:	08db      	lsrs	r3, r3, #3
 80081c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d12e      	bne.n	800824a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e028      	b.n	800824c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008226:	ea42 0103 	orr.w	r1, r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	e000      	b.n	800824c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
  }
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e042      	b.n	80082f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7f9 fb81 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2224      	movs	r2, #36	@ 0x24
 8008286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0201 	bic.w	r2, r2, #1
 8008298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9ca 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f825 	bl	80082f8 <UART_SetConfig>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e01b      	b.n	80082f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa49 	bl	8008780 <UART_CheckIdleState>
 80082ee:	4603      	mov	r3, r0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082fc:	b094      	sub	sp, #80	@ 0x50
 80082fe:	af00      	add	r7, sp, #0
 8008300:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b7e      	ldr	r3, [pc, #504]	@ (8008508 <UART_SetConfig+0x210>)
 800830e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	431a      	orrs	r2, r3
 800831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	431a      	orrs	r2, r3
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4313      	orrs	r3, r2
 8008326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4977      	ldr	r1, [pc, #476]	@ (800850c <UART_SetConfig+0x214>)
 8008330:	4019      	ands	r1, r3
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008338:	430b      	orrs	r3, r1
 800833a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	68d9      	ldr	r1, [r3, #12]
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	ea40 0301 	orr.w	r3, r0, r1
 8008352:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b6a      	ldr	r3, [pc, #424]	@ (8008508 <UART_SetConfig+0x210>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d009      	beq.n	8008378 <UART_SetConfig+0x80>
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b69      	ldr	r3, [pc, #420]	@ (8008510 <UART_SetConfig+0x218>)
 800836a:	429a      	cmp	r2, r3
 800836c:	d004      	beq.n	8008378 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008374:	4313      	orrs	r3, r2
 8008376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008382:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800838c:	430b      	orrs	r3, r1
 800838e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008396:	f023 000f 	bic.w	r0, r3, #15
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	ea40 0301 	orr.w	r3, r0, r1
 80083a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b59      	ldr	r3, [pc, #356]	@ (8008514 <UART_SetConfig+0x21c>)
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d102      	bne.n	80083b8 <UART_SetConfig+0xc0>
 80083b2:	2301      	movs	r3, #1
 80083b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b6:	e029      	b.n	800840c <UART_SetConfig+0x114>
 80083b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	4b56      	ldr	r3, [pc, #344]	@ (8008518 <UART_SetConfig+0x220>)
 80083be:	429a      	cmp	r2, r3
 80083c0:	d102      	bne.n	80083c8 <UART_SetConfig+0xd0>
 80083c2:	2302      	movs	r3, #2
 80083c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c6:	e021      	b.n	800840c <UART_SetConfig+0x114>
 80083c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b53      	ldr	r3, [pc, #332]	@ (800851c <UART_SetConfig+0x224>)
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d102      	bne.n	80083d8 <UART_SetConfig+0xe0>
 80083d2:	2304      	movs	r3, #4
 80083d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083d6:	e019      	b.n	800840c <UART_SetConfig+0x114>
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	4b50      	ldr	r3, [pc, #320]	@ (8008520 <UART_SetConfig+0x228>)
 80083de:	429a      	cmp	r2, r3
 80083e0:	d102      	bne.n	80083e8 <UART_SetConfig+0xf0>
 80083e2:	2308      	movs	r3, #8
 80083e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083e6:	e011      	b.n	800840c <UART_SetConfig+0x114>
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008524 <UART_SetConfig+0x22c>)
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d102      	bne.n	80083f8 <UART_SetConfig+0x100>
 80083f2:	2310      	movs	r3, #16
 80083f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f6:	e009      	b.n	800840c <UART_SetConfig+0x114>
 80083f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4b42      	ldr	r3, [pc, #264]	@ (8008508 <UART_SetConfig+0x210>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	d102      	bne.n	8008408 <UART_SetConfig+0x110>
 8008402:	2320      	movs	r3, #32
 8008404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008406:	e001      	b.n	800840c <UART_SetConfig+0x114>
 8008408:	2300      	movs	r3, #0
 800840a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4b3d      	ldr	r3, [pc, #244]	@ (8008508 <UART_SetConfig+0x210>)
 8008412:	429a      	cmp	r2, r3
 8008414:	d005      	beq.n	8008422 <UART_SetConfig+0x12a>
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b3d      	ldr	r3, [pc, #244]	@ (8008510 <UART_SetConfig+0x218>)
 800841c:	429a      	cmp	r2, r3
 800841e:	f040 8085 	bne.w	800852c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008424:	2200      	movs	r2, #0
 8008426:	623b      	str	r3, [r7, #32]
 8008428:	627a      	str	r2, [r7, #36]	@ 0x24
 800842a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800842e:	f7fe fa8f 	bl	8006950 <HAL_RCCEx_GetPeriphCLKFreq>
 8008432:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80e8 	beq.w	800860c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	4a39      	ldr	r2, [pc, #228]	@ (8008528 <UART_SetConfig+0x230>)
 8008442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008446:	461a      	mov	r2, r3
 8008448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800844a:	fbb3 f3f2 	udiv	r3, r3, r2
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800845c:	429a      	cmp	r2, r3
 800845e:	d305      	bcc.n	800846c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008468:	429a      	cmp	r2, r3
 800846a:	d903      	bls.n	8008474 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008472:	e048      	b.n	8008506 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008476:	2200      	movs	r2, #0
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	4a29      	ldr	r2, [pc, #164]	@ (8008528 <UART_SetConfig+0x230>)
 8008482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008486:	b29b      	uxth	r3, r3
 8008488:	2200      	movs	r2, #0
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	617a      	str	r2, [r7, #20]
 800848e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008496:	f7f7 feef 	bl	8000278 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	020b      	lsls	r3, r1, #8
 80084ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084b0:	0202      	lsls	r2, r0, #8
 80084b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084b4:	6849      	ldr	r1, [r1, #4]
 80084b6:	0849      	lsrs	r1, r1, #1
 80084b8:	2000      	movs	r0, #0
 80084ba:	460c      	mov	r4, r1
 80084bc:	4605      	mov	r5, r0
 80084be:	eb12 0804 	adds.w	r8, r2, r4
 80084c2:	eb43 0905 	adc.w	r9, r3, r5
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	60fa      	str	r2, [r7, #12]
 80084d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f7 fece 	bl	8000278 <__aeabi_uldivmod>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4613      	mov	r3, r2
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ea:	d308      	bcc.n	80084fe <UART_SetConfig+0x206>
 80084ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f2:	d204      	bcs.n	80084fe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	e003      	b.n	8008506 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008504:	e082      	b.n	800860c <UART_SetConfig+0x314>
 8008506:	e081      	b.n	800860c <UART_SetConfig+0x314>
 8008508:	46002400 	.word	0x46002400
 800850c:	cfff69f3 	.word	0xcfff69f3
 8008510:	56002400 	.word	0x56002400
 8008514:	40013800 	.word	0x40013800
 8008518:	40004400 	.word	0x40004400
 800851c:	40004800 	.word	0x40004800
 8008520:	40004c00 	.word	0x40004c00
 8008524:	40005000 	.word	0x40005000
 8008528:	080096f8 	.word	0x080096f8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008534:	d13c      	bne.n	80085b0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008538:	2200      	movs	r2, #0
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	607a      	str	r2, [r7, #4]
 800853e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008542:	f7fe fa05 	bl	8006950 <HAL_RCCEx_GetPeriphCLKFreq>
 8008546:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d05e      	beq.n	800860c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	4a39      	ldr	r2, [pc, #228]	@ (8008638 <UART_SetConfig+0x340>)
 8008554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008558:	461a      	mov	r2, r3
 800855a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800855c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008560:	005a      	lsls	r2, r3, #1
 8008562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	441a      	add	r2, r3
 800856a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d916      	bls.n	80085a8 <UART_SetConfig+0x2b0>
 800857a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008580:	d212      	bcs.n	80085a8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008584:	b29b      	uxth	r3, r3
 8008586:	f023 030f 	bic.w	r3, r3, #15
 800858a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800858c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	b29b      	uxth	r3, r3
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	b29a      	uxth	r2, r3
 8008598:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800859a:	4313      	orrs	r3, r2
 800859c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	e031      	b.n	800860c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80085ae:	e02d      	b.n	800860c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80085b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b2:	2200      	movs	r2, #0
 80085b4:	469a      	mov	sl, r3
 80085b6:	4693      	mov	fp, r2
 80085b8:	4650      	mov	r0, sl
 80085ba:	4659      	mov	r1, fp
 80085bc:	f7fe f9c8 	bl	8006950 <HAL_RCCEx_GetPeriphCLKFreq>
 80085c0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80085c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d021      	beq.n	800860c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008638 <UART_SetConfig+0x340>)
 80085ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d2:	461a      	mov	r2, r3
 80085d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	441a      	add	r2, r3
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ee:	2b0f      	cmp	r3, #15
 80085f0:	d909      	bls.n	8008606 <UART_SetConfig+0x30e>
 80085f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f8:	d205      	bcs.n	8008606 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	e002      	b.n	800860c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800860c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860e:	2201      	movs	r2, #1
 8008610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	2201      	movs	r2, #1
 8008618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	2200      	movs	r2, #0
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	2200      	movs	r2, #0
 8008626:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008628:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800862c:	4618      	mov	r0, r3
 800862e:	3750      	adds	r7, #80	@ 0x50
 8008630:	46bd      	mov	sp, r7
 8008632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008636:	bf00      	nop
 8008638:	080096f8 	.word	0x080096f8

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b098      	sub	sp, #96	@ 0x60
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008790:	f7f9 fb88 	bl	8001ea4 <HAL_GetTick>
 8008794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d12f      	bne.n	8008804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087ac:	2200      	movs	r2, #0
 80087ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f88e 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d022      	beq.n	8008804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80087de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e063      	b.n	80088cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b04      	cmp	r3, #4
 8008810:	d149      	bne.n	80088a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800881a:	2200      	movs	r2, #0
 800881c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f857 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d03c      	beq.n	80088a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	623b      	str	r3, [r7, #32]
   return(result);
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800884a:	633b      	str	r3, [r7, #48]	@ 0x30
 800884c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e6      	bne.n	800882c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	60fb      	str	r3, [r7, #12]
   return(result);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800887e:	61fa      	str	r2, [r7, #28]
 8008880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	617b      	str	r3, [r7, #20]
   return(result);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e012      	b.n	80088cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3758      	adds	r7, #88	@ 0x58
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e4:	e04f      	b.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d04b      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ee:	f7f9 fad9 	bl	8001ea4 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <UART_WaitOnFlagUntilTimeout+0x30>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e04e      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d037      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b80      	cmp	r3, #128	@ 0x80
 800891a:	d034      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b40      	cmp	r3, #64	@ 0x40
 8008920:	d031      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b08      	cmp	r3, #8
 800892e:	d110      	bne.n	8008952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f838 	bl	80089ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2208      	movs	r2, #8
 8008942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e029      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008960:	d111      	bne.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800896a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f81e 	bl	80089ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e00f      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d0a0      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b095      	sub	sp, #84	@ 0x54
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e3      	bne.n	80089e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d118      	bne.n	8008a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f023 0310 	bic.w	r3, r3, #16
 8008a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	613b      	str	r3, [r7, #16]
   return(result);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a6e:	bf00      	nop
 8008a70:	3754      	adds	r7, #84	@ 0x54
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e027      	b.n	8008ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	@ 0x24
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e02d      	b.n	8008b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2224      	movs	r2, #36	@ 0x24
 8008b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f84f 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e02d      	b.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	@ 0x24
 8008b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f811 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d108      	bne.n	8008c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c04:	e031      	b.n	8008c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c06:	2308      	movs	r3, #8
 8008c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	0e5b      	lsrs	r3, r3, #25
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	0f5b      	lsrs	r3, r3, #29
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	7b3a      	ldrb	r2, [r7, #12]
 8008c32:	4911      	ldr	r1, [pc, #68]	@ (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c34:	5c8a      	ldrb	r2, [r1, r2]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c3a:	7b3a      	ldrb	r2, [r7, #12]
 8008c3c:	490f      	ldr	r1, [pc, #60]	@ (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	7b7a      	ldrb	r2, [r7, #13]
 8008c50:	4909      	ldr	r1, [pc, #36]	@ (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c52:	5c8a      	ldrb	r2, [r1, r2]
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c58:	7b7a      	ldrb	r2, [r7, #13]
 8008c5a:	4908      	ldr	r1, [pc, #32]	@ (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	08009710 	.word	0x08009710
 8008c7c:	08009718 	.word	0x08009718

08008c80 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f043 0202 	orr.w	r2, r3, #2
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f023 0202 	bic.w	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b08b      	sub	sp, #44	@ 0x2c
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	613b      	str	r3, [r7, #16]
  return result;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e003      	b.n	8008cf0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	fab3 f383 	clz	r3, r3
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	2103      	movs	r1, #3
 8008cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	401a      	ands	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	fa93 f3a3 	rbit	r3, r3
 8008d06:	61fb      	str	r3, [r7, #28]
  return result;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008d12:	2320      	movs	r3, #32
 8008d14:	e003      	b.n	8008d1e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	fab3 f383 	clz	r3, r3
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	fa01 f303 	lsl.w	r3, r1, r3
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8008d2c:	bf00      	nop
 8008d2e:	372c      	adds	r7, #44	@ 0x2c
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	43db      	mvns	r3, r3
 8008d4c:	401a      	ands	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	431a      	orrs	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	605a      	str	r2, [r3, #4]
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b08b      	sub	sp, #44	@ 0x2c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	fa93 f3a3 	rbit	r3, r3
 8008d82:	613b      	str	r3, [r7, #16]
  return result;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008d8e:	2320      	movs	r3, #32
 8008d90:	e003      	b.n	8008d9a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	fab3 f383 	clz	r3, r3
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	2103      	movs	r1, #3
 8008d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008da2:	43db      	mvns	r3, r3
 8008da4:	401a      	ands	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	fa93 f3a3 	rbit	r3, r3
 8008db0:	61fb      	str	r3, [r7, #28]
  return result;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	e003      	b.n	8008dc8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	fab3 f383 	clz	r3, r3
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8008dd6:	bf00      	nop
 8008dd8:	372c      	adds	r7, #44	@ 0x2c
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b08b      	sub	sp, #44	@ 0x2c
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	fa93 f3a3 	rbit	r3, r3
 8008dfc:	613b      	str	r3, [r7, #16]
  return result;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008e08:	2320      	movs	r3, #32
 8008e0a:	e003      	b.n	8008e14 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	fab3 f383 	clz	r3, r3
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	2103      	movs	r1, #3
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	401a      	ands	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	fa93 f3a3 	rbit	r3, r3
 8008e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008e36:	2320      	movs	r3, #32
 8008e38:	e003      	b.n	8008e42 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	fab3 f383 	clz	r3, r3
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8008e50:	bf00      	nop
 8008e52:	372c      	adds	r7, #44	@ 0x2c
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b08b      	sub	sp, #44	@ 0x2c
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a1a      	ldr	r2, [r3, #32]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	fa93 f3a3 	rbit	r3, r3
 8008e76:	613b      	str	r3, [r7, #16]
  return result;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008e82:	2320      	movs	r3, #32
 8008e84:	e003      	b.n	8008e8e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	fab3 f383 	clz	r3, r3
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	210f      	movs	r1, #15
 8008e92:	fa01 f303 	lsl.w	r3, r1, r3
 8008e96:	43db      	mvns	r3, r3
 8008e98:	401a      	ands	r2, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	fa93 f3a3 	rbit	r3, r3
 8008ea4:	61fb      	str	r3, [r7, #28]
  return result;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	e003      	b.n	8008ebc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	fab3 f383 	clz	r3, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8008eca:	bf00      	nop
 8008ecc:	372c      	adds	r7, #44	@ 0x2c
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b08b      	sub	sp, #44	@ 0x2c
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	fa93 f3a3 	rbit	r3, r3
 8008ef2:	613b      	str	r3, [r7, #16]
  return result;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008efe:	2320      	movs	r3, #32
 8008f00:	e003      	b.n	8008f0a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	fab3 f383 	clz	r3, r3
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	210f      	movs	r1, #15
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	401a      	ands	r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	fa93 f3a3 	rbit	r3, r3
 8008f22:	61fb      	str	r3, [r7, #28]
  return result;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008f2e:	2320      	movs	r3, #32
 8008f30:	e003      	b.n	8008f3a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	fab3 f383 	clz	r3, r3
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8008f48:	bf00      	nop
 8008f4a:	372c      	adds	r7, #44	@ 0x2c
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	@ 0x28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	fa93 f3a3 	rbit	r3, r3
 8008f6a:	617b      	str	r3, [r7, #20]
  return result;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <LL_GPIO_Init+0x26>
    return 32U;
 8008f76:	2320      	movs	r3, #32
 8008f78:	e003      	b.n	8008f82 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	fab3 f383 	clz	r3, r3
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008f84:	e058      	b.n	8009038 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f92:	4013      	ands	r3, r2
 8008f94:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d04a      	beq.n	8009032 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d003      	beq.n	8008fac <LL_GPIO_Init+0x58>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d10e      	bne.n	8008fca <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6a39      	ldr	r1, [r7, #32]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff fed7 	bl	8008d68 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff feb7 	bl	8008d38 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6a39      	ldr	r1, [r7, #32]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff ff05 	bl	8008de2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d121      	bne.n	8009024 <LL_GPIO_Init+0xd0>
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	fa93 f3a3 	rbit	r3, r3
 8008fea:	60bb      	str	r3, [r7, #8]
  return result;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <LL_GPIO_Init+0xa6>
    return 32U;
 8008ff6:	2320      	movs	r3, #32
 8008ff8:	e003      	b.n	8009002 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	fab3 f383 	clz	r3, r3
 8009000:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009002:	2b07      	cmp	r3, #7
 8009004:	d807      	bhi.n	8009016 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	461a      	mov	r2, r3
 800900c:	6a39      	ldr	r1, [r7, #32]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff ff24 	bl	8008e5c <LL_GPIO_SetAFPin_0_7>
 8009014:	e006      	b.n	8009024 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	461a      	mov	r2, r3
 800901c:	6a39      	ldr	r1, [r7, #32]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff ff59 	bl	8008ed6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	461a      	mov	r2, r3
 800902a:	6a39      	ldr	r1, [r7, #32]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff fe46 	bl	8008cbe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	3301      	adds	r3, #1
 8009036:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d19f      	bne.n	8008f86 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3728      	adds	r7, #40	@ 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009050:	b084      	sub	sp, #16
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	f107 001c 	add.w	r0, r7, #28
 800905e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa6c 	bl	800954c <USB_CoreReset>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009078:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
 800908c:	e005      	b.n	800909a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009092:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a6:	b004      	add	sp, #16
 80090a8:	4770      	bx	lr

080090aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d115      	bne.n	800911a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090fa:	200a      	movs	r0, #10
 80090fc:	f7f8 fede 	bl	8001ebc <HAL_Delay>
      ms += 10U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	330a      	adds	r3, #10
 8009104:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa12 	bl	8009530 <USB_GetMode>
 800910c:	4603      	mov	r3, r0
 800910e:	2b01      	cmp	r3, #1
 8009110:	d01e      	beq.n	8009150 <USB_SetCurrentMode+0x84>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2bc7      	cmp	r3, #199	@ 0xc7
 8009116:	d9f0      	bls.n	80090fa <USB_SetCurrentMode+0x2e>
 8009118:	e01a      	b.n	8009150 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d115      	bne.n	800914c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800912c:	200a      	movs	r0, #10
 800912e:	f7f8 fec5 	bl	8001ebc <HAL_Delay>
      ms += 10U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	330a      	adds	r3, #10
 8009136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f9f9 	bl	8009530 <USB_GetMode>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <USB_SetCurrentMode+0x84>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2bc7      	cmp	r3, #199	@ 0xc7
 8009148:	d9f0      	bls.n	800912c <USB_SetCurrentMode+0x60>
 800914a:	e001      	b.n	8009150 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e005      	b.n	800915c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2bc8      	cmp	r3, #200	@ 0xc8
 8009154:	d101      	bne.n	800915a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009164:	b084      	sub	sp, #16
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800917e:	2300      	movs	r3, #0
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	e009      	b.n	8009198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3340      	adds	r3, #64	@ 0x40
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	2200      	movs	r2, #0
 8009190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3301      	adds	r3, #1
 8009196:	613b      	str	r3, [r7, #16]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b0e      	cmp	r3, #14
 800919c:	d9f2      	bls.n	8009184 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800919e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11c      	bne.n	80091e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e005      	b.n	80091ec <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f2:	461a      	mov	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091f8:	2103      	movs	r1, #3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f95e 	bl	80094bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009200:	2110      	movs	r1, #16
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8fa 	bl	80093fc <USB_FlushTxFifo>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f924 	bl	8009460 <USB_FlushRxFifo>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009240:	461a      	mov	r2, r3
 8009242:	2300      	movs	r3, #0
 8009244:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009246:	2300      	movs	r3, #0
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	e043      	b.n	80092d4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800925e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009262:	d118      	bne.n	8009296 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e013      	b.n	80092a8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	e008      	b.n	80092a8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a2:	461a      	mov	r2, r3
 80092a4:	2300      	movs	r3, #0
 80092a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b4:	461a      	mov	r2, r3
 80092b6:	2300      	movs	r3, #0
 80092b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c6:	461a      	mov	r2, r3
 80092c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	3301      	adds	r3, #1
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092d8:	461a      	mov	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	4293      	cmp	r3, r2
 80092de:	d3b5      	bcc.n	800924c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	e043      	b.n	800936e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092fc:	d118      	bne.n	8009330 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	e013      	b.n	8009342 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009326:	461a      	mov	r2, r3
 8009328:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	e008      	b.n	8009342 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933c:	461a      	mov	r2, r3
 800933e:	2300      	movs	r3, #0
 8009340:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934e:	461a      	mov	r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009360:	461a      	mov	r2, r3
 8009362:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	3301      	adds	r3, #1
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009372:	461a      	mov	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4293      	cmp	r3, r2
 8009378:	d3b5      	bcc.n	80092e6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800938c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800939a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800939c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f043 0210 	orr.w	r2, r3, #16
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699a      	ldr	r2, [r3, #24]
 80093b4:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <USB_DevInit+0x294>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f043 0208 	orr.w	r2, r3, #8
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d107      	bne.n	80093e8 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093f4:	b004      	add	sp, #16
 80093f6:	4770      	bx	lr
 80093f8:	803c3800 	.word	0x803c3800

080093fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3301      	adds	r3, #1
 800940e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009416:	d901      	bls.n	800941c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e01b      	b.n	8009454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	daf2      	bge.n	800940a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	019b      	lsls	r3, r3, #6
 800942c:	f043 0220 	orr.w	r2, r3, #32
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009440:	d901      	bls.n	8009446 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e006      	b.n	8009454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b20      	cmp	r3, #32
 8009450:	d0f0      	beq.n	8009434 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009478:	d901      	bls.n	800947e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e018      	b.n	80094b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	daf2      	bge.n	800946c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2210      	movs	r2, #16
 800948e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800949c:	d901      	bls.n	80094a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e006      	b.n	80094b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0310 	and.w	r3, r3, #16
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d0f0      	beq.n	8009490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	68f9      	ldr	r1, [r7, #12]
 80094d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094dc:	4313      	orrs	r3, r2
 80094de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800951c:	f043 0302 	orr.w	r3, r3, #2
 8009520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	f003 0301 	and.w	r3, r3, #1
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009564:	d901      	bls.n	800956a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e01b      	b.n	80095a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	daf2      	bge.n	8009558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f043 0201 	orr.w	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800958e:	d901      	bls.n	8009594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e006      	b.n	80095a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d0f0      	beq.n	8009582 <USB_CoreReset+0x36>

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <memset>:
 80095ae:	4402      	add	r2, r0
 80095b0:	4603      	mov	r3, r0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d100      	bne.n	80095b8 <memset+0xa>
 80095b6:	4770      	bx	lr
 80095b8:	f803 1b01 	strb.w	r1, [r3], #1
 80095bc:	e7f9      	b.n	80095b2 <memset+0x4>
	...

080095c0 <__libc_init_array>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	4d0d      	ldr	r5, [pc, #52]	@ (80095f8 <__libc_init_array+0x38>)
 80095c4:	2600      	movs	r6, #0
 80095c6:	4c0d      	ldr	r4, [pc, #52]	@ (80095fc <__libc_init_array+0x3c>)
 80095c8:	1b64      	subs	r4, r4, r5
 80095ca:	10a4      	asrs	r4, r4, #2
 80095cc:	42a6      	cmp	r6, r4
 80095ce:	d109      	bne.n	80095e4 <__libc_init_array+0x24>
 80095d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009600 <__libc_init_array+0x40>)
 80095d2:	2600      	movs	r6, #0
 80095d4:	4c0b      	ldr	r4, [pc, #44]	@ (8009604 <__libc_init_array+0x44>)
 80095d6:	f000 f817 	bl	8009608 <_init>
 80095da:	1b64      	subs	r4, r4, r5
 80095dc:	10a4      	asrs	r4, r4, #2
 80095de:	42a6      	cmp	r6, r4
 80095e0:	d105      	bne.n	80095ee <__libc_init_array+0x2e>
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e8:	3601      	adds	r6, #1
 80095ea:	4798      	blx	r3
 80095ec:	e7ee      	b.n	80095cc <__libc_init_array+0xc>
 80095ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f2:	3601      	adds	r6, #1
 80095f4:	4798      	blx	r3
 80095f6:	e7f2      	b.n	80095de <__libc_init_array+0x1e>
 80095f8:	08009728 	.word	0x08009728
 80095fc:	08009728 	.word	0x08009728
 8009600:	08009728 	.word	0x08009728
 8009604:	0800972c 	.word	0x0800972c

08009608 <_init>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr

08009614 <_fini>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	bf00      	nop
 8009618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961a:	bc08      	pop	{r3}
 800961c:	469e      	mov	lr, r3
 800961e:	4770      	bx	lr
